<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="jsoncpp_8cpp" kind="file" language="C++">
    <compoundname>jsoncpp.cpp</compoundname>
    <includes local="yes">json/json.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">exception</includes>
    <includes local="no">map</includes>
    <includes local="no">deque</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">stack</includes>
    <includes local="no">istream</includes>
    <includes local="no">ostream</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">utility</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstring</includes>
    <includes local="no">memory</includes>
    <includes local="no">set</includes>
    <includes local="no">limits</includes>
    <includes local="no">math.h</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="239">
        <label>iomanip</label>
      </node>
      <node id="235">
        <label>limits</label>
      </node>
      <node id="216">
        <label>json/json.h</label>
      </node>
      <node id="227">
        <label>stdlib.h</label>
      </node>
      <node id="240">
        <label>cmath</label>
      </node>
      <node id="231">
        <label>cassert</label>
      </node>
      <node id="218">
        <label>string</label>
      </node>
      <node id="221">
        <label>map</label>
      </node>
      <node id="220">
        <label>exception</label>
      </node>
      <node id="217">
        <label>stddef.h</label>
      </node>
      <node id="226">
        <label>ostream</label>
      </node>
      <node id="230">
        <label>cstdio</label>
      </node>
      <node id="224">
        <label>stack</label>
      </node>
      <node id="219">
        <label>vector</label>
      </node>
      <node id="229">
        <label>utility</label>
      </node>
      <node id="228">
        <label>sstream</label>
      </node>
      <node id="236">
        <label>math.h</label>
      </node>
      <node id="223">
        <label>iosfwd</label>
      </node>
      <node id="215">
        <label>/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp</label>
        <link refid="jsoncpp.cpp"/>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
      </node>
      <node id="237">
        <label>cstddef</label>
      </node>
      <node id="222">
        <label>deque</label>
      </node>
      <node id="234">
        <label>set</label>
      </node>
      <node id="238">
        <label>algorithm</label>
      </node>
      <node id="232">
        <label>cstring</label>
      </node>
      <node id="233">
        <label>memory</label>
      </node>
      <node id="225">
        <label>istream</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_json_1_1_our_features" prot="public">Json::OurFeatures</innerclass>
    <innerclass refid="class_json_1_1_our_reader" prot="public">Json::OurReader</innerclass>
    <innerclass refid="struct_json_1_1_our_reader_1_1_structured_error" prot="public">Json::OurReader::StructuredError</innerclass>
    <innerclass refid="class_json_1_1_our_reader_1_1_token" prot="private">Json::OurReader::Token</innerclass>
    <innerclass refid="class_json_1_1_our_reader_1_1_error_info" prot="private">Json::OurReader::ErrorInfo</innerclass>
    <innerclass refid="class_json_1_1_our_char_reader" prot="public">Json::OurCharReader</innerclass>
    <innerclass refid="struct_json_1_1_comment_style" prot="public">Json::CommentStyle</innerclass>
    <innerclass refid="struct_json_1_1_built_styled_stream_writer" prot="public">Json::BuiltStyledStreamWriter</innerclass>
    <innernamespace refid="namespace_json">Json</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="jsoncpp_8cpp_1abc5174d762d996e7d77cfcb90ca94834" prot="public" static="no">
        <name>LIB_JSONCPP_JSON_TOOL_H_INCLUDED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Json-cpp amalgated source (<ulink url="http://jsoncpp.sourceforge.net/">http://jsoncpp.sourceforge.net/</ulink>). It is intended to be used with #include &quot;json/json.h&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" line="93" column="9" bodyfile="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" prot="public" static="no">
        <name>JSON_ASSERT_UNREACHABLE</name>
        <initializer>assert(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" line="2441" column="9" bodyfile="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" bodystart="2441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jsoncpp_8cpp_1a08a0024ebd1cc16ccc4a208e1e817f6e" prot="public" static="no">
        <name>ALIGNAS</name>
        <param><defname>byte_alignment</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" line="2451" column="10" bodyfile="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" bodystart="2451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jsoncpp_8cpp_1aab49fbe39624f083e45ef2d85e7e0705" prot="public" static="no">
        <name>isfinite</name>
        <initializer>std::isfinite</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" line="4023" column="9" bodyfile="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" bodystart="4023" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="jsoncpp_8cpp_1aa07a622879ae3a72facddfd839f459b9" prot="public" static="yes" mutable="no">
        <type>int const</type>
        <definition>int const stackLimit_g</definition>
        <argsstring></argsstring>
        <name>stackLimit_g</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" line="234" column="1" bodyfile="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" bodystart="234" bodyend="-1"/>
        <referencedby refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" compoundref="jsoncpp_8cpp" startline="266" endline="271">Json::containsNewLine</referencedby>
      </memberdef>
      <memberdef kind="variable" id="jsoncpp_8cpp_1a53b45133c80814ea63d9f61966cfb831" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int stackDepth_g</definition>
        <argsstring></argsstring>
        <name>stackDepth_g</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" line="235" column="1" bodyfile="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp" bodystart="235" bodyend="-1"/>
        <referencedby refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" compoundref="jsoncpp_8cpp" startline="266" endline="271">Json::containsNewLine</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Beginning<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9"><highlight class="comment">The<sp/>JsonCpp<sp/>library&apos;s<sp/>source<sp/>code,<sp/>including<sp/>accompanying<sp/>documentation,<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment">tests<sp/>and<sp/>demonstration<sp/>applications,<sp/>are<sp/>licensed<sp/>under<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="11"><highlight class="comment">conditions...</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">The<sp/>author<sp/>(Baptiste<sp/>Lepilleur)<sp/>explicitly<sp/>disclaims<sp/>copyright<sp/>in<sp/>all<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">jurisdictions<sp/>which<sp/>recognize<sp/>such<sp/>a<sp/>disclaimer.<sp/>In<sp/>such<sp/>jurisdictions,<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">this<sp/>software<sp/>is<sp/>released<sp/>into<sp/>the<sp/>Public<sp/>Domain.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">In<sp/>jurisdictions<sp/>which<sp/>do<sp/>not<sp/>recognize<sp/>Public<sp/>Domain<sp/>property<sp/>(e.g.<sp/>Germany<sp/>as<sp/>of</highlight></codeline>
<codeline lineno="18"><highlight class="comment">2010),<sp/>this<sp/>software<sp/>is<sp/>Copyright<sp/>(c)<sp/>2007-2010<sp/>by<sp/>Baptiste<sp/>Lepilleur,<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="19"><highlight class="comment">released<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>License<sp/>(see<sp/>below).</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">In<sp/>jurisdictions<sp/>which<sp/>recognize<sp/>Public<sp/>Domain<sp/>property,<sp/>the<sp/>user<sp/>of<sp/>this<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment">software<sp/>may<sp/>choose<sp/>to<sp/>accept<sp/>it<sp/>either<sp/>as<sp/>1)<sp/>Public<sp/>Domain,<sp/>2)<sp/>under<sp/>the<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment">conditions<sp/>of<sp/>the<sp/>MIT<sp/>License<sp/>(see<sp/>below),<sp/>or<sp/>3)<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>dual<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment">Public<sp/>Domain/MIT<sp/>License<sp/>conditions<sp/>described<sp/>here,<sp/>as<sp/>they<sp/>choose.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">The<sp/>MIT<sp/>License<sp/>is<sp/>about<sp/>as<sp/>close<sp/>to<sp/>Public<sp/>Domain<sp/>as<sp/>a<sp/>license<sp/>can<sp/>get,<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="27"><highlight class="comment">described<sp/>in<sp/>clear,<sp/>concise<sp/>terms<sp/>at:</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>http://en.wikipedia.org/wiki/MIT_License</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment">The<sp/>full<sp/>text<sp/>of<sp/>the<sp/>MIT<sp/>License<sp/>follows:</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">========================================================================</highlight></codeline>
<codeline lineno="34"><highlight class="comment">Copyright<sp/>(c)<sp/>2007-2010<sp/>Baptiste<sp/>Lepilleur</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="37"><highlight class="comment">obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="38"><highlight class="comment">files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without</highlight></codeline>
<codeline lineno="39"><highlight class="comment">restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,</highlight></codeline>
<codeline lineno="40"><highlight class="comment">modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="41"><highlight class="comment">of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="42"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="45"><highlight class="comment">included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="48"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="49"><highlight class="comment">MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="50"><highlight class="comment">NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="51"><highlight class="comment">BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="52"><highlight class="comment">ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="53"><highlight class="comment">CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="54"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="55"><highlight class="comment">========================================================================</highlight></codeline>
<codeline lineno="56"><highlight class="comment">(END<sp/>LICENSE<sp/>TEXT)</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">The<sp/>MIT<sp/>license<sp/>is<sp/>compatible<sp/>with<sp/>both<sp/>the<sp/>GPL<sp/>and<sp/>commercial</highlight></codeline>
<codeline lineno="59"><highlight class="comment">software,<sp/>affording<sp/>one<sp/>all<sp/>of<sp/>the<sp/>rights<sp/>of<sp/>Public<sp/>Domain<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="60"><highlight class="comment">minor<sp/>nuisance<sp/>of<sp/>being<sp/>required<sp/>to<sp/>keep<sp/>the<sp/>above<sp/>copyright<sp/>notice</highlight></codeline>
<codeline lineno="61"><highlight class="comment">and<sp/>license<sp/>text<sp/>in<sp/>the<sp/>source<sp/>code.<sp/>Note<sp/>also<sp/>that<sp/>by<sp/>accepting<sp/>the</highlight></codeline>
<codeline lineno="62"><highlight class="comment">Public<sp/>Domain<sp/>&quot;license&quot;<sp/>you<sp/>can<sp/>re-license<sp/>your<sp/>copy<sp/>using<sp/>whatever</highlight></codeline>
<codeline lineno="63"><highlight class="comment">license<sp/>you<sp/>like.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;json/json.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>JSON_IS_AMALGAMATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Compile<sp/>with<sp/>-I<sp/>PATH_TO_JSON_DIRECTORY&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Beginning<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_tool.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2007-2010<sp/>Baptiste<sp/>Lepilleur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>MIT<sp/>license,<sp/>or<sp/>public<sp/>domain<sp/>if<sp/>desired<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized<sp/>in<sp/>your<sp/>jurisdiction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>LICENSE<sp/>for<sp/>detail<sp/>or<sp/>copy<sp/>at<sp/>http://jsoncpp.sourceforge.net/LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIB_JSONCPP_JSON_TOOL_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="jsoncpp_8cpp_1abc5174d762d996e7d77cfcb90ca94834" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIB_JSONCPP_JSON_TOOL_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>header<sp/>provides<sp/>common<sp/>string<sp/>manipulation<sp/>support,<sp/>such<sp/>as<sp/>UTF-8,</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>portable<sp/>conversion<sp/>from/to<sp/>string...</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>an<sp/>internal<sp/>header<sp/>that<sp/>must<sp/>not<sp/>be<sp/>exposed.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="namespace_json" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_json" kindref="compound">Json</ref><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="namespace_json_1adf0456e397a18cd7218a7b51dfc13c73" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_json_1adf0456e397a18cd7218a7b51dfc13c73" kindref="member">codePointToUTF8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>description<sp/>from<sp/>http://en.wikipedia.org/wiki/UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>0x7f)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>result.resize(1);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>result[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cp);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>0x7FF)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>result.resize(2);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>result[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>(0x3f<sp/>&amp;<sp/>cp));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>result[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xC0<sp/>|<sp/>(0x1f<sp/>&amp;<sp/>(cp<sp/>&gt;&gt;<sp/>6)));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>0xFFFF)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>result.resize(3);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>result[2]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>(0x3f<sp/>&amp;<sp/>cp));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>result[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>(0x3f<sp/>&amp;<sp/>(cp<sp/>&gt;&gt;<sp/>6)));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>result[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xE0<sp/>|<sp/>(0xf<sp/>&amp;<sp/>(cp<sp/>&gt;&gt;<sp/>12)));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>0x10FFFF)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>result.resize(4);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>result[3]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>(0x3f<sp/>&amp;<sp/>cp));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>result[2]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>(0x3f<sp/>&amp;<sp/>(cp<sp/>&gt;&gt;<sp/>6)));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>result[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/>(0x3f<sp/>&amp;<sp/>(cp<sp/>&gt;&gt;<sp/>12)));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>result[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xF0<sp/>|<sp/>(0x7<sp/>&amp;<sp/>(cp<sp/>&gt;&gt;<sp/>18)));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="namespace_json_1a0381e631737f51331065a388f4f59197" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a0381e631737f51331065a388f4f59197" kindref="member">isControlCharacter</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/>0x1F;<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="138" refid="namespace_json_1a0c5f614b019f20b4598dcaec09d9e820ae4f2008c7919f20d81286121d1374424" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1a0c5f614b019f20b4598dcaec09d9e820ae4f2008c7919f20d81286121d1374424" kindref="member">uintToStringBufferSize</ref><sp/>=<sp/>3<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(LargestUInt)<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>char<sp/>buffer<sp/>for<sp/>use<sp/>with<sp/>uintToString().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="namespace_json_1a602bcf69c2042fb61c3b243cb16f04ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a602bcf69c2042fb61c3b243cb16f04ca" kindref="member">UIntToStringBuffer</ref>[<ref refid="namespace_json_1a0c5f614b019f20b4598dcaec09d9e820ae4f2008c7919f20d81286121d1374424" kindref="member">uintToStringBufferSize</ref>];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="namespace_json_1ac1ffd21a9e55122014353c773ccc496e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1ac1ffd21a9e55122014353c773ccc496e" kindref="member">uintToString</ref>(LargestUInt<sp/>value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>current)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>*--current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>*--current<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value<sp/>%<sp/>10U<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="namespace_json_1aa208904144dc7b11ccc28f47c9afab9a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1aa208904144dc7b11ccc28f47c9afab9a" kindref="member">fixNumericLocale</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*begin<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LIB_JSONCPP_JSON_TOOL_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_tool.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Beginning<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_reader.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2007-2011<sp/>Baptiste<sp/>Lepilleur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>MIT<sp/>license,<sp/>or<sp/>public<sp/>domain<sp/>if<sp/>desired<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized<sp/>in<sp/>your<sp/>jurisdiction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>LICENSE<sp/>for<sp/>detail<sp/>or<sp/>copy<sp/>at<sp/>http://jsoncpp.sourceforge.net/LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/assertions.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/reader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/value.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;json_tool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;istream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(WINCE)<sp/>&amp;&amp;<sp/>defined(__STDC_SECURE_LIB__)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1500<sp/>//<sp/>VC++<sp/>9.0<sp/>and<sp/>above<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>sprintf_s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_MSC_VER<sp/>&gt;=<sp/>1900<sp/>//<sp/>VC++<sp/>14.0<sp/>and<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>std::snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ANDROID__)<sp/>||<sp/>defined(__QNXNTO__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__MINGW32__)<sp/>&amp;&amp;<sp/>!defined(__CYGWIN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>std::snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__QNXNTO__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sscanf<sp/>std::sscanf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400<sp/>//<sp/>VC++<sp/>8.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>warning<sp/>about<sp/>strdup<sp/>being<sp/>deprecated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4996)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="jsoncpp_8cpp_1aa07a622879ae3a72facddfd839f459b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="jsoncpp_8cpp_1aa07a622879ae3a72facddfd839f459b9" kindref="member">stackLimit_g</ref><sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="235" refid="jsoncpp_8cpp_1a53b45133c80814ea63d9f61966cfb831" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsoncpp_8cpp_1a53b45133c80814ea63d9f61966cfb831" kindref="member">stackDepth_g</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>readValue()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_json" kindref="compound">Json</ref><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201103L<sp/>||<sp/>(defined(_CPPLIB_VER)<sp/>&amp;&amp;<sp/>_CPPLIB_VER<sp/>&gt;=<sp/>520)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;CharReader&gt;<sp/><ref refid="namespace_json_1a4724efb8d41614b47036cb8b54233837" kindref="member">CharReaderPtr</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="namespace_json_1a4724efb8d41614b47036cb8b54233837" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::auto_ptr&lt;CharReader&gt;<sp/><sp/><sp/><ref refid="namespace_json_1a4724efb8d41614b47036cb8b54233837" kindref="member">CharReaderPtr</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>class<sp/>Features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">Features::Features()</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>allowComments_(true),<sp/>strictRoot_(false),</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allowDroppedNullPlaceholders_(false),<sp/>allowNumericKeys_(false)<sp/>{}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">Features<sp/>Features::all()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Features();<sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">Features<sp/>Features::strictMode()<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>Features<sp/>features;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>features.allowComments_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>features.strictRoot_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>features.allowDroppedNullPlaceholders_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>features.allowNumericKeys_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>features;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>class<sp/>Reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" kindref="member">containsNewLine</ref>(Reader::Location<sp/>begin,<sp/>Reader::Location<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>begin<sp/>&lt;<sp/>end;<sp/>++begin)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>Reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">Reader::Reader()</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>errors_(),<sp/>document_(),<sp/>begin_(),<sp/>end_(),<sp/>current_(),<sp/>lastValueEnd_(),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastValue_(),<sp/>commentsBefore_(),<sp/>features_(Features::all()),</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>collectComments_()<sp/>{}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">Reader::Reader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Features&amp;<sp/>features)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>errors_(),<sp/>document_(),<sp/>begin_(),<sp/>end_(),<sp/>current_(),<sp/>lastValueEnd_(),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastValue_(),<sp/>commentsBefore_(),<sp/>features_(features),<sp/>collectComments_()<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">Reader::parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>document,<sp/>Value&amp;<sp/>root,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collectComments)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>document_<sp/>=<sp/>document;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin<sp/>=<sp/>document_.c_str();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>begin<sp/>+<sp/>document_.length();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse(begin,<sp/>end,<sp/>root,<sp/>collectComments);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::parse(std::istream&amp;<sp/>sin,<sp/>Value&amp;<sp/>root,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collectComments)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::istream_iterator&lt;char&gt;<sp/>begin(sin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::istream_iterator&lt;char&gt;<sp/>end;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Those<sp/>would<sp/>allow<sp/>streamed<sp/>input<sp/>from<sp/>a<sp/>file,<sp/>if<sp/>parse()<sp/>were<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>std::string<sp/>is<sp/>reference-counted,<sp/>this<sp/>at<sp/>least<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>extra<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>std::string<sp/>doc;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::getline(sin,<sp/>doc,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)EOF);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse(doc,<sp/>root,<sp/>collectComments);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>beginDoc,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>endDoc,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value&amp;<sp/>root,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collectComments)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!features_.allowComments_)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>collectComments<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>begin_<sp/>=<sp/>beginDoc;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>end_<sp/>=<sp/>endDoc;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>collectComments_<sp/>=<sp/>collectComments;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>current_<sp/>=<sp/>begin_;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>lastValueEnd_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>lastValue_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>commentsBefore_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>errors_.clear();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!nodes_.empty())</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes_.pop();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>nodes_.push(&amp;root);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><ref refid="jsoncpp_8cpp_1a53b45133c80814ea63d9f61966cfb831" kindref="member">stackDepth_g</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Yes,<sp/>this<sp/>is<sp/>bad<sp/>coding,<sp/>but<sp/>options<sp/>are<sp/>limited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>successful<sp/>=<sp/>readValue();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>Token<sp/>token;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>skipCommentTokens(token);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collectComments_<sp/>&amp;&amp;<sp/>!commentsBefore_.empty())</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>root.setComment(commentsBefore_,<sp/>commentAfter);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(features_.strictRoot_)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root.isArray()<sp/>&amp;&amp;<sp/>!root.isObject())<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>error<sp/>location<sp/>to<sp/>start<sp/>of<sp/>doc,<sp/>ideally<sp/>should<sp/>be<sp/>first<sp/>token<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>doc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenError;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.start_<sp/>=<sp/>beginDoc;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.end_<sp/>=<sp/>endDoc;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addError(</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>valid<sp/>JSON<sp/>document<sp/>must<sp/>be<sp/>either<sp/>an<sp/>array<sp/>or<sp/>an<sp/>object<sp/>value.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>successful;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readValue()<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>non-reentrant<sp/>way<sp/>to<sp/>support<sp/>a<sp/>stackLimit.<sp/>Terrible!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>this<sp/>deprecated<sp/>class<sp/>has<sp/>a<sp/>security<sp/>problem:<sp/>Bad<sp/>input<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cause<sp/>a<sp/>seg-fault.<sp/>This<sp/>seems<sp/>like<sp/>a<sp/>fair,<sp/>binary-compatible<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>prevent<sp/>the<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="jsoncpp_8cpp_1a53b45133c80814ea63d9f61966cfb831" kindref="member">stackDepth_g</ref><sp/>&gt;=<sp/><ref refid="jsoncpp_8cpp_1aa07a622879ae3a72facddfd839f459b9" kindref="member">stackLimit_g</ref>)<sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;Exceeded<sp/>stackLimit<sp/>in<sp/>readValue().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>++<ref refid="jsoncpp_8cpp_1a53b45133c80814ea63d9f61966cfb831" kindref="member">stackDepth_g</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>Token<sp/>token;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>skipCommentTokens(token);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>successful<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collectComments_<sp/>&amp;&amp;<sp/>!commentsBefore_.empty())<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setComment(commentsBefore_,<sp/>commentBefore);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>commentsBefore_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(token.type_)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenObjectBegin:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/>readObject(token);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetLimit(current_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenArrayBegin:</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/>readArray(token);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetLimit(current_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenNumber:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/>decodeNumber(token);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenString:</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/>decodeString(token);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenTrue:</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().swapPayload(v);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetStart(token.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetLimit(token.end_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenFalse:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().swapPayload(v);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetStart(token.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetLimit(token.end_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenNull:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().swapPayload(v);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetStart(token.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetLimit(token.end_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenArraySeparator:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenObjectEnd:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tokenArrayEnd:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(features_.allowDroppedNullPlaceholders_)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Un-read&quot;<sp/>the<sp/>current<sp/>token<sp/>and<sp/>mark<sp/>the<sp/>current<sp/>value<sp/>as<sp/>a<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_--;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>v;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentValue().swapPayload(v);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentValue().setOffsetStart(current_<sp/>-<sp/>begin_<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentValue().setOffsetLimit(current_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>Else,<sp/>fall<sp/>through...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetStart(token.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>currentValue().setOffsetLimit(token.end_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight><highlight class="stringliteral">&quot;Syntax<sp/>error:<sp/>value,<sp/>object<sp/>or<sp/>array<sp/>expected.&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collectComments_)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>lastValueEnd_<sp/>=<sp/>current_;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>lastValue_<sp/>=<sp/>&amp;currentValue();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>--<ref refid="jsoncpp_8cpp_1a53b45133c80814ea63d9f61966cfb831" kindref="member">stackDepth_g</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>successful;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reader::skipCommentTokens(Token&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(features_.allowComments_)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readToken(token);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token.type_<sp/>==<sp/>tokenComment);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>readToken(token);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readToken(Token&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>skipSpaces();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>token.start_<sp/>=<sp/>current_;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>Char<sp/>c<sp/>=<sp/>getNextChar();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenObjectBegin;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenObjectEnd;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenArrayBegin;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenArrayEnd;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenString;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>readString();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenComment;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>readComment();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenNumber;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>readNumber();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenTrue;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>match(</highlight><highlight class="stringliteral">&quot;rue&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenFalse;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>match(</highlight><highlight class="stringliteral">&quot;alse&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenNull;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>match(</highlight><highlight class="stringliteral">&quot;ull&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenArraySeparator;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenMemberSeparator;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenEndOfStream;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>token.type_<sp/>=<sp/>tokenError;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>token.end_<sp/>=<sp/>current_;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reader::skipSpaces()<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_<sp/>!=<sp/>end_)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>*current_;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++current_;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::match(Location<sp/>pattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>patternLength)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_<sp/>-<sp/>current_<sp/>&lt;<sp/>patternLength)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>patternLength;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index--)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_[index]<sp/>!=<sp/>pattern[index])</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>current_<sp/>+=<sp/>patternLength;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readComment()<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>Location<sp/>commentBegin<sp/>=<sp/>current_<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>Char<sp/>c<sp/>=<sp/>getNextChar();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>successful<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/>readCStyleComment();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/>readCppStyleComment();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!successful)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collectComments_)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>CommentPlacement<sp/>placement<sp/>=<sp/>commentBefore;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastValueEnd_<sp/>&amp;&amp;<sp/>!<ref refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" kindref="member">containsNewLine</ref>(lastValueEnd_,<sp/>commentBegin))<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>||<sp/>!<ref refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" kindref="member">containsNewLine</ref>(commentBegin,<sp/>current_))</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placement<sp/>=<sp/>commentAfterOnSameLine;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>addComment(commentBegin,<sp/>current_,<sp/>placement);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="namespace_json_1a2e6b8616041876128cbef54b8c75da62" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_json_1a2e6b8616041876128cbef54b8c75da62" kindref="member">normalizeEOL</ref>(Reader::Location<sp/>begin,<sp/>Reader::Location<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>std::string<sp/>normalized;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>normalized.reserve(static_cast&lt;size_t&gt;(end<sp/>-<sp/>begin));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>Reader::Location<sp/>current<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>dos<sp/>EOL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>Mac<sp/>EOL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalized<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalized<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normalized;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">Reader::addComment(Location<sp/>begin,<sp/>Location<sp/>end,<sp/>CommentPlacement<sp/>placement)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>assert(collectComments_);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>normalized<sp/>=<sp/><ref refid="namespace_json_1a2e6b8616041876128cbef54b8c75da62" kindref="member">normalizeEOL</ref>(begin,<sp/>end);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(placement<sp/>==<sp/>commentAfterOnSameLine)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(lastValue_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>lastValue_-&gt;setComment(normalized,<sp/>placement);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>commentsBefore_<sp/>+=<sp/>normalized;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readCStyleComment()<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_<sp/>!=<sp/>end_)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>getNextChar();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*current_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getNextChar()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readCppStyleComment()<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_<sp/>!=<sp/>end_)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>getNextChar();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Consume<sp/>DOS<sp/>EOL.<sp/>It<sp/>will<sp/>be<sp/>normalized<sp/>in<sp/>addComment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_<sp/>!=<sp/>end_<sp/>&amp;&amp;<sp/>*current_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getNextChar();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Break<sp/>on<sp/>Moc<sp/>OS<sp/>9<sp/>EOL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reader::readNumber()<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>current_;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>stopgap<sp/>for<sp/>already<sp/>consumed<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(current_<sp/>=<sp/>p)<sp/>&lt;<sp/>end_<sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(current_<sp/>=<sp/>p)<sp/>&lt;<sp/>end_<sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(current_<sp/>=<sp/>p)<sp/>&lt;<sp/>end_<sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exponential<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(current_<sp/>=<sp/>p)<sp/>&lt;<sp/>end_<sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(current_<sp/>=<sp/>p)<sp/>&lt;<sp/>end_<sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(current_<sp/>=<sp/>p)<sp/>&lt;<sp/>end_<sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readString()<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>Char<sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_<sp/>!=<sp/>end_)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>getNextChar();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getNextChar();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readObject(Token&amp;<sp/>tokenStart)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>Token<sp/>tokenName;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>Value<sp/>init(objectValue);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>currentValue().swapPayload(init);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>currentValue().setOffsetStart(tokenStart.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(readToken(tokenName))<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initialTokenOk<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tokenName.type_<sp/>==<sp/>tokenComment<sp/>&amp;&amp;<sp/>initialTokenOk)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialTokenOk<sp/>=<sp/>readToken(tokenName);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialTokenOk)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tokenName.type_<sp/>==<sp/>tokenObjectEnd<sp/>&amp;&amp;<sp/>name.empty())<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tokenName.type_<sp/>==<sp/>tokenString)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decodeString(tokenName,<sp/>name))</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>recoverFromError(tokenObjectEnd);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tokenName.type_<sp/>==<sp/>tokenNumber<sp/>&amp;&amp;<sp/>features_.allowNumericKeys_)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>numberName;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decodeNumber(tokenName,<sp/>numberName))</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>recoverFromError(tokenObjectEnd);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>numberName.asString();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>Token<sp/>colon;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readToken(colon)<sp/>||<sp/>colon.type_<sp/>!=<sp/>tokenMemberSeparator)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addErrorAndRecover(</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;:&apos;<sp/>after<sp/>object<sp/>member<sp/>name&quot;</highlight><highlight class="normal">,<sp/>colon,<sp/>tokenObjectEnd);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>Value&amp;<sp/>value<sp/>=<sp/>currentValue()[name];</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes_.push(&amp;value);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>readValue();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes_.pop();</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/></highlight><highlight class="comment">//<sp/>error<sp/>already<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>recoverFromError(tokenObjectEnd);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>Token<sp/>comma;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readToken(comma)<sp/>||</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(comma.type_<sp/>!=<sp/>tokenObjectEnd<sp/>&amp;&amp;<sp/>comma.type_<sp/>!=<sp/>tokenArraySeparator<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comma.type_<sp/>!=<sp/>tokenComment))<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addErrorAndRecover(</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;,&apos;<sp/>or<sp/>&apos;}&apos;<sp/>in<sp/>object<sp/>declaration&quot;</highlight><highlight class="normal">,<sp/>comma,<sp/>tokenObjectEnd);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finalizeTokenOk<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(comma.type_<sp/>==<sp/>tokenComment<sp/>&amp;&amp;<sp/>finalizeTokenOk)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finalizeTokenOk<sp/>=<sp/>readToken(comma);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comma.type_<sp/>==<sp/>tokenObjectEnd)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addErrorAndRecover(</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;}&apos;<sp/>or<sp/>object<sp/>member<sp/>name&quot;</highlight><highlight class="normal">,<sp/>tokenName,<sp/>tokenObjectEnd);</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::readArray(Token&amp;<sp/>tokenStart)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>Value<sp/>init(arrayValue);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>currentValue().swapPayload(init);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>currentValue().setOffsetStart(tokenStart.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>skipSpaces();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*current_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>Token<sp/>endArray;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>readToken(endArray);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>Value&amp;<sp/>value<sp/>=<sp/>currentValue()[index++];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes_.push(&amp;value);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>readValue();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes_.pop();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/></highlight><highlight class="comment">//<sp/>error<sp/>already<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>recoverFromError(tokenArrayEnd);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>Token<sp/>token;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>Comment<sp/>after<sp/>last<sp/>item<sp/>in<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>readToken(token);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token.type_<sp/>==<sp/>tokenComment<sp/>&amp;&amp;<sp/>ok)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>readToken(token);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>badTokenType<sp/>=</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(token.type_<sp/>!=<sp/>tokenArraySeparator<sp/>&amp;&amp;<sp/>token.type_<sp/>!=<sp/>tokenArrayEnd);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok<sp/>||<sp/>badTokenType)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addErrorAndRecover(</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;,&apos;<sp/>or<sp/>&apos;]&apos;<sp/>in<sp/>array<sp/>declaration&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>tokenArrayEnd);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.type_<sp/>==<sp/>tokenArrayEnd)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeNumber(Token&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>Value<sp/>decoded;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decodeNumber(token,<sp/>decoded))</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>currentValue().swapPayload(decoded);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>currentValue().setOffsetStart(token.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>currentValue().setOffsetLimit(token.end_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeNumber(Token&amp;<sp/>token,<sp/>Value&amp;<sp/>decoded)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempts<sp/>to<sp/>parse<sp/>the<sp/>number<sp/>as<sp/>an<sp/>integer.<sp/>If<sp/>the<sp/>number<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>larger<sp/>than<sp/>the<sp/>maximum<sp/>supported<sp/>value<sp/>of<sp/>an<sp/>integer<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>decode<sp/>the<sp/>number<sp/>as<sp/>a<sp/>double.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>Location<sp/>current<sp/>=<sp/>token.start_;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegative<sp/>=<sp/>*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Help<sp/>the<sp/>compiler<sp/>do<sp/>the<sp/>div<sp/>and<sp/>mod<sp/>at<sp/>compile<sp/>time<sp/>or<sp/>get<sp/>rid<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>Value::LargestUInt<sp/>maxIntegerValue<sp/>=</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isNegative<sp/>?<sp/>Value::LargestUInt(Value::maxLargestInt)<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Value::maxLargestUInt;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>Value::LargestUInt<sp/>threshold<sp/>=<sp/>maxIntegerValue<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>Value::LargestUInt<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>&lt;<sp/>token.end_)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>&apos;0&apos;<sp/>||<sp/>c<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decodeDouble(token,<sp/>decoded);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>Value::UInt<sp/>digit(static_cast&lt;Value::UInt&gt;(c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;=<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>hit<sp/>or<sp/>exceeded<sp/>the<sp/>max<sp/>value<sp/>divided<sp/>by<sp/>10<sp/>(rounded<sp/>down).<sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a)<sp/>we&apos;ve<sp/>only<sp/>just<sp/>touched<sp/>the<sp/>limit,<sp/>b)<sp/>this<sp/>is<sp/>the<sp/>last<sp/>digit,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c)<sp/>it&apos;s<sp/>small<sp/>enough<sp/>to<sp/>fit<sp/>in<sp/>that<sp/>rounding<sp/>delta,<sp/>we&apos;re<sp/>okay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>treat<sp/>this<sp/>number<sp/>as<sp/>a<sp/>double<sp/>to<sp/>avoid<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>threshold<sp/>||<sp/>current<sp/>!=<sp/>token.end_<sp/>||</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>&gt;<sp/>maxIntegerValue<sp/>%<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decodeDouble(token,<sp/>decoded);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>value<sp/>*<sp/>10<sp/>+<sp/>digit;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative<sp/>&amp;&amp;<sp/>value<sp/>==<sp/>maxIntegerValue)</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>Value::minLargestInt;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>-Value::LargestInt(value);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;=<sp/>Value::LargestUInt(Value::maxInt))</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>Value::LargestInt(value);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeDouble(Token&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>Value<sp/>decoded;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decodeDouble(token,<sp/>decoded))</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>currentValue().swapPayload(decoded);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>currentValue().setOffsetStart(token.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>currentValue().setOffsetLimit(token.end_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeDouble(Token&amp;<sp/>token,<sp/>Value&amp;<sp/>decoded)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>std::string<sp/>buffer(token.start_,<sp/>token.end_);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>is(buffer);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(is<sp/>&gt;&gt;<sp/>value))</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(token.start_,<sp/>token.end_)<sp/>+</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>not<sp/>a<sp/>number.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>decoded<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeString(Token&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>std::string<sp/>decoded_string;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decodeString(token,<sp/>decoded_string))</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>Value<sp/>decoded(decoded_string);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>currentValue().swapPayload(decoded);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>currentValue().setOffsetStart(token.start_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>currentValue().setOffsetLimit(token.end_<sp/>-<sp/>begin_);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeString(Token&amp;<sp/>token,<sp/>std::string&amp;<sp/>decoded)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>decoded.reserve(static_cast&lt;size_t&gt;(token.end_<sp/>-<sp/>token.start_<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>Location<sp/>current<sp/>=<sp/>token.start_<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&apos;&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>Location<sp/>end<sp/>=<sp/>token.end_<sp/>-<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>include<sp/>&apos;&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight><highlight class="stringliteral">&quot;Empty<sp/>escape<sp/>sequence<sp/>in<sp/>string&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>current);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Char<sp/>escape<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(escape)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unicode;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decodeUnicodeCodePoint(token,<sp/>current,<sp/>end,<sp/>unicode))</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/><ref refid="namespace_json_1adf0456e397a18cd7218a7b51dfc13c73" kindref="member">codePointToUTF8</ref>(unicode);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight><highlight class="stringliteral">&quot;Bad<sp/>escape<sp/>sequence<sp/>in<sp/>string&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>current);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeUnicodeCodePoint(Token&amp;<sp/>token,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location&amp;<sp/>current,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location<sp/>end,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>unicode)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decodeUnicodeEscapeSequence(token,<sp/>current,<sp/>end,<sp/>unicode))</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicode<sp/>&gt;=<sp/>0xD800<sp/>&amp;&amp;<sp/>unicode<sp/>&lt;=<sp/>0xDBFF)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>surrogate<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>current<sp/>&lt;<sp/>6)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;additional<sp/>six<sp/>characters<sp/>expected<sp/>to<sp/>parse<sp/>unicode<sp/>surrogate<sp/>pair.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surrogatePair;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(current++)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*(current++)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decodeUnicodeEscapeSequence(token,<sp/>current,<sp/>end,<sp/>surrogatePair))<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>=<sp/>0x10000<sp/>+<sp/>((unicode<sp/>&amp;<sp/>0x3FF)<sp/>&lt;&lt;<sp/>10)<sp/>+<sp/>(surrogatePair<sp/>&amp;<sp/>0x3FF);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight><highlight class="stringliteral">&quot;expecting<sp/>another<sp/>\\u<sp/>token<sp/>to<sp/>begin<sp/>the<sp/>second<sp/>half<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>unicode<sp/>surrogate<sp/>pair&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::decodeUnicodeEscapeSequence(Token&amp;<sp/>token,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location&amp;<sp/>current,</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location<sp/>end,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>ret_unicode)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>current<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>unicode<sp/>escape<sp/>sequence<sp/>in<sp/>string:<sp/>four<sp/>digits<sp/>expected.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unicode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>4;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>unicode<sp/>*=<sp/>16;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>+=<sp/>c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>+=<sp/>c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>+=<sp/>c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addError(</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>unicode<sp/>escape<sp/>sequence<sp/>in<sp/>string:<sp/>hexadecimal<sp/>digit<sp/>expected.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>ret_unicode<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(unicode);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">Reader::addError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/>Token&amp;<sp/>token,<sp/>Location<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>ErrorInfo<sp/>info;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>info.token_<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>info.message_<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>info.extra_<sp/>=<sp/>extra;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>errors_.push_back(info);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::recoverFromError(TokenType<sp/>skipUntilToken)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>errorCount<sp/>=<sp/>errors_.size();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>Token<sp/>skip;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readToken(skip))</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errors_.resize(errorCount);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>errors<sp/>caused<sp/>by<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skip.type_<sp/>==<sp/>skipUntilToken<sp/>||<sp/>skip.type_<sp/>==<sp/>tokenEndOfStream)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>errors_.resize(errorCount);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::addErrorAndRecover(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Token&amp;<sp/>token,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TokenType<sp/>skipUntilToken)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>addError(message,<sp/>token);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>recoverFromError(skipUntilToken);</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal">Value&amp;<sp/>Reader::currentValue()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(nodes_.top());<sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal">Reader::Char<sp/>Reader::getNextChar()<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_<sp/>==<sp/>end_)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*current_++;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reader::getLocationLineAndColumn(Location<sp/>location,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>line,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>column)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>Location<sp/>current<sp/>=<sp/>begin_;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>Location<sp/>lastLineStart<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>&lt;<sp/>location<sp/>&amp;&amp;<sp/>current<sp/>!=<sp/>end_)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastLineStart<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastLineStart<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>&amp;<sp/>line<sp/>start<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>column<sp/>=<sp/>int(location<sp/>-<sp/>lastLineStart)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal">std::string<sp/>Reader::getLocationLineAndColumn(Location<sp/>location)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>column;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>getLocationLineAndColumn(location,<sp/>line,<sp/>column);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[18<sp/>+<sp/>16<sp/>+<sp/>16<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>%d,<sp/>Column<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>line,<sp/>column);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deprecated.<sp/>Preserved<sp/>for<sp/>backward<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal">std::string<sp/>Reader::getFormatedErrorMessages()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getFormattedErrorMessages();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal">std::string<sp/>Reader::getFormattedErrorMessages()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>std::string<sp/>formattedMessage;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Errors::const_iterator<sp/>itError<sp/>=<sp/>errors_.begin();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itError<sp/>!=<sp/>errors_.end();</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itError)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ErrorInfo&amp;<sp/>error<sp/>=<sp/>*itError;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>formattedMessage<sp/>+=</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;*<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>getLocationLineAndColumn(error.token_.start_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>formattedMessage<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>error.message_<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error.extra_)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formattedMessage<sp/>+=</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>getLocationLineAndColumn(error.extra_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>detail.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formattedMessage;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">std::vector&lt;Reader::StructuredError&gt;<sp/>Reader::getStructuredErrors()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>std::vector&lt;Reader::StructuredError&gt;<sp/>allErrors;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Errors::const_iterator<sp/>itError<sp/>=<sp/>errors_.begin();</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itError<sp/>!=<sp/>errors_.end();</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itError)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ErrorInfo&amp;<sp/>error<sp/>=<sp/>*itError;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader::StructuredError<sp/>structured;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>structured.offset_start<sp/>=<sp/>error.token_.start_<sp/>-<sp/>begin_;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>structured.offset_limit<sp/>=<sp/>error.token_.end_<sp/>-<sp/>begin_;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>structured.message<sp/>=<sp/>error.message_;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>allErrors.push_back(structured);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allErrors;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::pushError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>end_<sp/>-<sp/>begin_;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value.getOffsetStart()<sp/>&gt;<sp/>length</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>value.getOffsetLimit()<sp/>&gt;<sp/>length)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>Token<sp/>token;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>token.type_<sp/>=<sp/>tokenError;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>token.start_<sp/>=<sp/>begin_<sp/>+<sp/>value.getOffsetStart();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>token.end_<sp/>=<sp/>end_<sp/>+<sp/>value.getOffsetLimit();</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>ErrorInfo<sp/>info;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>info.token_<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>info.message_<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>info.extra_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>errors_.push_back(info);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::pushError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>end_<sp/>-<sp/>begin_;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value.getOffsetStart()<sp/>&gt;<sp/>length</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>value.getOffsetLimit()<sp/>&gt;<sp/>length</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>extra.getOffsetLimit()<sp/>&gt;<sp/>length)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>Token<sp/>token;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>token.type_<sp/>=<sp/>tokenError;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>token.start_<sp/>=<sp/>begin_<sp/>+<sp/>value.getOffsetStart();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>token.end_<sp/>=<sp/>begin_<sp/>+<sp/>value.getOffsetLimit();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>ErrorInfo<sp/>info;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>info.token_<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>info.message_<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>info.extra_<sp/>=<sp/>begin_<sp/>+<sp/>extra.getOffsetStart();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>errors_.push_back(info);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Reader::good()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!errors_.size();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exact<sp/>copy<sp/>of<sp/>Features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083" refid="class_json_1_1_our_features" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/><ref refid="class_json_1_1_our_features_1a0686e1406b6677f496529f9f3fe98d1e" kindref="member">all</ref>();</highlight></codeline>
<codeline lineno="1086" refid="class_json_1_1_our_features_1ac71bb7ba7363d3b05ed76602b036ce33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1ac71bb7ba7363d3b05ed76602b036ce33" kindref="member">allowComments_</ref>;</highlight></codeline>
<codeline lineno="1087" refid="class_json_1_1_our_features_1a2095f66a776c0a4ae6cc931a0c94242e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1a2095f66a776c0a4ae6cc931a0c94242e" kindref="member">strictRoot_</ref>;</highlight></codeline>
<codeline lineno="1088" refid="class_json_1_1_our_features_1a13963bc44bf948eec1968f7ff8e8f5f1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1a13963bc44bf948eec1968f7ff8e8f5f1" kindref="member">allowDroppedNullPlaceholders_</ref>;</highlight></codeline>
<codeline lineno="1089" refid="class_json_1_1_our_features_1af6973fc7e774ce2d634ba99442aeb91a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1af6973fc7e774ce2d634ba99442aeb91a" kindref="member">allowNumericKeys_</ref>;</highlight></codeline>
<codeline lineno="1090" refid="class_json_1_1_our_features_1abbd6c196d7a22e2a360a59887eda4610" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1abbd6c196d7a22e2a360a59887eda4610" kindref="member">allowSingleQuotes_</ref>;</highlight></codeline>
<codeline lineno="1091" refid="class_json_1_1_our_features_1ae8ad25b90706c78f1a8fe929191ac61b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1ae8ad25b90706c78f1a8fe929191ac61b" kindref="member">failIfExtra_</ref>;</highlight></codeline>
<codeline lineno="1092" refid="class_json_1_1_our_features_1a39b8e0b86b1c24a45e800c023bb715aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1a39b8e0b86b1c24a45e800c023bb715aa" kindref="member">rejectDupKeys_</ref>;</highlight></codeline>
<codeline lineno="1093" refid="class_json_1_1_our_features_1af760f91cc2a7af37e44f78fb466061bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1af760f91cc2a7af37e44f78fb466061bb" kindref="member">allowSpecialFloats_</ref>;</highlight></codeline>
<codeline lineno="1094" refid="class_json_1_1_our_features_1a9a786713902d14be6d57a08cc03ccfff" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features_1a9a786713902d14be6d57a08cc03ccfff" kindref="member">stackLimit_</ref>;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>OurFeatures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exact<sp/>copy<sp/>of<sp/>Implementation<sp/>of<sp/>class<sp/>Features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100" refid="class_json_1_1_our_features_1a0686e1406b6677f496529f9f3fe98d1e" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/><ref refid="class_json_1_1_our_features_1a0686e1406b6677f496529f9f3fe98d1e" kindref="member">OurFeatures::all</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>class<sp/>Reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exact<sp/>copy<sp/>of<sp/>Reader,<sp/>renamed<sp/>to<sp/>OurReader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106" refid="class_json_1_1_our_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_json_1_1_our_reader" kindref="compound">OurReader</ref><sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1108" refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref>;</highlight></codeline>
<codeline lineno="1109" refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref>;</highlight></codeline>
<codeline lineno="1110" refid="struct_json_1_1_our_reader_1_1_structured_error" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_json_1_1_our_reader_1_1_structured_error" kindref="compound">StructuredError</ref><sp/>{</highlight></codeline>
<codeline lineno="1111" refid="struct_json_1_1_our_reader_1_1_structured_error_1a102677698afb8177c985e72dafe72b15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrdiff_t<sp/><ref refid="struct_json_1_1_our_reader_1_1_structured_error_1a102677698afb8177c985e72dafe72b15" kindref="member">offset_start</ref>;</highlight></codeline>
<codeline lineno="1112" refid="struct_json_1_1_our_reader_1_1_structured_error_1a15491a751a39c5153af04e68b1d0abb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrdiff_t<sp/><ref refid="struct_json_1_1_our_reader_1_1_structured_error_1a15491a751a39c5153af04e68b1d0abb9" kindref="member">offset_limit</ref>;</highlight></codeline>
<codeline lineno="1113" refid="struct_json_1_1_our_reader_1_1_structured_error_1adc8a757b6452cc6ab14fb90b933b3414" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_json_1_1_our_reader_1_1_structured_error_1adc8a757b6452cc6ab14fb90b933b3414" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader" kindref="compound">OurReader</ref>(<ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>features);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>beginDoc,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>endDoc,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value&amp;<sp/>root,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collectComments<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>std::string<sp/>getFormattedErrorMessages()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>std::vector&lt;StructuredError&gt;<sp/>getStructuredErrors()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pushError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pushError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>extra);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>good()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader" kindref="compound">OurReader</ref>(<ref refid="class_json_1_1_our_reader" kindref="compound">OurReader</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(<ref refid="class_json_1_1_our_reader" kindref="compound">OurReader</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcc" kindref="member">TokenType</ref><sp/>{</highlight></codeline>
<codeline lineno="1132" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca735d1f76eafc2c0c581ed79c077aaa7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>tokenEndOfStream<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1133" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7495ef5c356d4faa39b702e528cc7e26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7495ef5c356d4faa39b702e528cc7e26" kindref="member">tokenObjectBegin</ref>,</highlight></codeline>
<codeline lineno="1134" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>,</highlight></codeline>
<codeline lineno="1135" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca45d229fce2f5f4b52dc0d6c39c853436" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca45d229fce2f5f4b52dc0d6c39c853436" kindref="member">tokenArrayBegin</ref>,</highlight></codeline>
<codeline lineno="1136" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" kindref="member">tokenArrayEnd</ref>,</highlight></codeline>
<codeline lineno="1137" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccadb37e59e1e52cd5e7417bc418b611ce1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccadb37e59e1e52cd5e7417bc418b611ce1" kindref="member">tokenString</ref>,</highlight></codeline>
<codeline lineno="1138" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca766aefde855b1246d89b8552240c70d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca766aefde855b1246d89b8552240c70d1" kindref="member">tokenNumber</ref>,</highlight></codeline>
<codeline lineno="1139" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccac7d2a552afcea291d47cf49dfefaf619" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccac7d2a552afcea291d47cf49dfefaf619" kindref="member">tokenTrue</ref>,</highlight></codeline>
<codeline lineno="1140" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccaab91e3ef98c1cb1326c3674e518c5126" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccaab91e3ef98c1cb1326c3674e518c5126" kindref="member">tokenFalse</ref>,</highlight></codeline>
<codeline lineno="1141" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca4c80b7bb245e3863e38dc8e8586b3c51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca4c80b7bb245e3863e38dc8e8586b3c51" kindref="member">tokenNull</ref>,</highlight></codeline>
<codeline lineno="1142" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca167898478691f1ac7a240981ccaa1713" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca167898478691f1ac7a240981ccaa1713" kindref="member">tokenNaN</ref>,</highlight></codeline>
<codeline lineno="1143" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca800c7c7e896d569ebf6c2771eecc7060" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca800c7c7e896d569ebf6c2771eecc7060" kindref="member">tokenPosInf</ref>,</highlight></codeline>
<codeline lineno="1144" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca3cf3c4c72d6b5969f17f043a34b2ad4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca3cf3c4c72d6b5969f17f043a34b2ad4c" kindref="member">tokenNegInf</ref>,</highlight></codeline>
<codeline lineno="1145" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8ca62ab9091b149d52ec55828f8040f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8ca62ab9091b149d52ec55828f8040f4" kindref="member">tokenArraySeparator</ref>,</highlight></codeline>
<codeline lineno="1146" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7c95881fb1162316bce42c629bf06214" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7c95881fb1162316bce42c629bf06214" kindref="member">tokenMemberSeparator</ref>,</highlight></codeline>
<codeline lineno="1147" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" kindref="member">tokenComment</ref>,</highlight></codeline>
<codeline lineno="1148" refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccad39f929b971de8dc55fe84a2d2e3465e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>tokenError</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="class_json_1_1_our_reader_1_1_token" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1153" refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcc" kindref="member">TokenType</ref><sp/><ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="1154" refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Location<sp/><ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="1155" refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Location<sp/><ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158" refid="class_json_1_1_our_reader_1_1_error_info" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_json_1_1_our_reader_1_1_error_info" kindref="compound">ErrorInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1160" refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/><ref refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" kindref="member">token_</ref>;</highlight></codeline>
<codeline lineno="1161" refid="class_json_1_1_our_reader_1_1_error_info_1a9c973ff4d2c47134b770027d5d37d906" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_json_1_1_our_reader_1_1_error_info_1a9c973ff4d2c47134b770027d5d37d906" kindref="member">message_</ref>;</highlight></codeline>
<codeline lineno="1162" refid="class_json_1_1_our_reader_1_1_error_info_1a77ba2d32a471c7b9bc14621b76a5bdab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Location<sp/><ref refid="class_json_1_1_our_reader_1_1_error_info_1a77ba2d32a471c7b9bc14621b76a5bdab" kindref="member">extra_</ref>;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165" refid="class_json_1_1_our_reader_1a8cc69593ef7303e58e99bb5dbb767562" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::deque&lt;ErrorInfo&gt;<sp/><ref refid="class_json_1_1_our_reader_1a8cc69593ef7303e58e99bb5dbb767562" kindref="member">Errors</ref>;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readToken(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipSpaces();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(Location<sp/>pattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>patternLength);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readComment();</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readCStyleComment();</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readCppStyleComment();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readString();</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readStringSingleQuote();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readNumber(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkInf);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readValue();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readObject(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readArray(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeNumber(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeNumber(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>Value&amp;<sp/>decoded);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeString(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeString(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>std::string&amp;<sp/>decoded);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeDouble(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeDouble(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>Value&amp;<sp/>decoded);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeUnicodeCodePoint(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location&amp;<sp/>current,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location<sp/>end,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>unicode);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decodeUnicodeEscapeSequence(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location&amp;<sp/>current,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Location<sp/>end,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>unicode);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>Location<sp/>extra<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recoverFromError(<ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcc" kindref="member">TokenType</ref><sp/>skipUntilToken);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addErrorAndRecover(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcc" kindref="member">TokenType</ref><sp/>skipUntilToken);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipUntilSpace();</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>Value&amp;<sp/>currentValue();</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>Char<sp/>getNextChar();</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>getLocationLineAndColumn(Location<sp/>location,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>column)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>std::string<sp/>getLocationLineAndColumn(Location<sp/>location)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addComment(Location<sp/>begin,<sp/>Location<sp/>end,<sp/>CommentPlacement<sp/>placement);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipCommentTokens(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207" refid="class_json_1_1_our_reader_1a8480a5ef159cee3a090f96358414d8d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::stack&lt;Value*&gt;<sp/><ref refid="class_json_1_1_our_reader_1a8480a5ef159cee3a090f96358414d8d3" kindref="member">Nodes</ref>;</highlight></codeline>
<codeline lineno="1208" refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" refkind="member"><highlight class="normal"><sp/><sp/>Nodes<sp/><ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>;</highlight></codeline>
<codeline lineno="1209" refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" refkind="member"><highlight class="normal"><sp/><sp/>Errors<sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>;</highlight></codeline>
<codeline lineno="1210" refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref>;</highlight></codeline>
<codeline lineno="1211" refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" refkind="member"><highlight class="normal"><sp/><sp/>Location<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>;</highlight></codeline>
<codeline lineno="1212" refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" refkind="member"><highlight class="normal"><sp/><sp/>Location<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>;</highlight></codeline>
<codeline lineno="1213" refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" refkind="member"><highlight class="normal"><sp/><sp/>Location<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="1214" refid="class_json_1_1_our_reader_1a101eadc45e01c60628b53f0db3d13482" refkind="member"><highlight class="normal"><sp/><sp/>Location<sp/><ref refid="class_json_1_1_our_reader_1a101eadc45e01c60628b53f0db3d13482" kindref="member">lastValueEnd_</ref>;</highlight></codeline>
<codeline lineno="1215" refid="class_json_1_1_our_reader_1a9f994b6a2227c5d96e6ed6cbc74ed251" refkind="member"><highlight class="normal"><sp/><sp/>Value*<sp/><ref refid="class_json_1_1_our_reader_1a9f994b6a2227c5d96e6ed6cbc74ed251" kindref="member">lastValue_</ref>;</highlight></codeline>
<codeline lineno="1216" refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref>;</highlight></codeline>
<codeline lineno="1217" refid="class_json_1_1_our_reader_1aaa91c93bc064c7086248ea01eddcf51a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aaa91c93bc064c7086248ea01eddcf51a" kindref="member">stackDepth_</ref>;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219" refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>;</highlight></codeline>
<codeline lineno="1220" refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" kindref="member">collectComments_</ref>;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>OurReader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>complete<sp/>copy<sp/>of<sp/>Read<sp/>impl,<sp/>for<sp/>OurReader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225" refid="class_json_1_1_our_reader_1a48a850914b9c8d7781be172930c478e5" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_our_reader_1a48a850914b9c8d7781be172930c478e5" kindref="member">OurReader::OurReader</ref>(<ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>features)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>errors_(),<sp/>document_(),<sp/>begin_(),<sp/>end_(),<sp/>current_(),<sp/>lastValueEnd_(),</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastValue_(),<sp/>commentsBefore_(),</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackDepth_(0),</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>features_(features),<sp/>collectComments_()<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232" refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" kindref="member">OurReader::parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>beginDoc,</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>endDoc,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value&amp;<sp/>root,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collectComments)<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1ac71bb7ba7363d3b05ed76602b036ce33" kindref="member">allowComments_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>collectComments<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref><sp/>=<sp/>beginDoc;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>=<sp/>endDoc;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" kindref="member">collectComments_</ref><sp/>=<sp/>collectComments;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a101eadc45e01c60628b53f0db3d13482" kindref="member">lastValueEnd_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a9f994b6a2227c5d96e6ed6cbc74ed251" kindref="member">lastValue_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.clear();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.empty())</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.pop();</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.push(&amp;root);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aaa91c93bc064c7086248ea01eddcf51a" kindref="member">stackDepth_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>successful<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" kindref="member">readValue</ref>();</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a856dea44d92578c276856d7a65a4ebdc" kindref="member">skipCommentTokens</ref>(token);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1ae8ad25b90706c78f1a8fe929191ac61b" kindref="member">failIfExtra_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccad39f929b971de8dc55fe84a2d2e3465e" kindref="member">tokenError</ref><sp/>&amp;&amp;<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca735d1f76eafc2c0c581ed79c077aaa7e" kindref="member">tokenEndOfStream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight><highlight class="stringliteral">&quot;Extra<sp/>non-whitespace<sp/>after<sp/>JSON<sp/>value.&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" kindref="member">collectComments_</ref><sp/>&amp;&amp;<sp/>!<ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref>.empty())</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>root.setComment(<ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref>,<sp/>commentAfter);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1a2095f66a776c0a4ae6cc931a0c94242e" kindref="member">strictRoot_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root.isArray()<sp/>&amp;&amp;<sp/>!root.isObject())<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>error<sp/>location<sp/>to<sp/>start<sp/>of<sp/>doc,<sp/>ideally<sp/>should<sp/>be<sp/>first<sp/>token<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>doc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccad39f929b971de8dc55fe84a2d2e3465e" kindref="member">tokenError</ref>;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>=<sp/>beginDoc;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>=<sp/>endDoc;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>valid<sp/>JSON<sp/>document<sp/>must<sp/>be<sp/>either<sp/>an<sp/>array<sp/>or<sp/>an<sp/>object<sp/>value.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>successful;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280" refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" kindref="member">OurReader::readValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1aaa91c93bc064c7086248ea01eddcf51a" kindref="member">stackDepth_</ref><sp/>&gt;=<sp/><ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1a9a786713902d14be6d57a08cc03ccfff" kindref="member">stackLimit_</ref>)<sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;Exceeded<sp/>stackLimit<sp/>in<sp/>readValue().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>++<ref refid="class_json_1_1_our_reader_1aaa91c93bc064c7086248ea01eddcf51a" kindref="member">stackDepth_</ref>;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a856dea44d92578c276856d7a65a4ebdc" kindref="member">skipCommentTokens</ref>(token);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>successful<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" kindref="member">collectComments_</ref><sp/>&amp;&amp;<sp/>!<ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setComment(<ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref>,<sp/>commentBefore);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7495ef5c356d4faa39b702e528cc7e26" kindref="member">tokenObjectBegin</ref>:</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" kindref="member">readObject</ref>(token);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca45d229fce2f5f4b52dc0d6c39c853436" kindref="member">tokenArrayBegin</ref>:</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a0b9f58faf4212c6ecb5d8e2a1ac10257" kindref="member">readArray</ref>(token);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca766aefde855b1246d89b8552240c70d1" kindref="member">tokenNumber</ref>:</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" kindref="member">decodeNumber</ref>(token);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccadb37e59e1e52cd5e7417bc418b611ce1" kindref="member">tokenString</ref>:</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" kindref="member">decodeString</ref>(token);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccac7d2a552afcea291d47cf49dfefaf619" kindref="member">tokenTrue</ref>:</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(v);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccaab91e3ef98c1cb1326c3674e518c5126" kindref="member">tokenFalse</ref>:</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(v);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca4c80b7bb245e3863e38dc8e8586b3c51" kindref="member">tokenNull</ref>:</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(v);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca167898478691f1ac7a240981ccaa1713" kindref="member">tokenNaN</ref>:</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v(std::numeric_limits&lt;double&gt;::quiet_NaN());</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(v);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca800c7c7e896d569ebf6c2771eecc7060" kindref="member">tokenPosInf</ref>:</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v(std::numeric_limits&lt;double&gt;::infinity());</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(v);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca3cf3c4c72d6b5969f17f043a34b2ad4c" kindref="member">tokenNegInf</ref>:</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>v(-std::numeric_limits&lt;double&gt;::infinity());</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(v);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8ca62ab9091b149d52ec55828f8040f4" kindref="member">tokenArraySeparator</ref>:</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>:</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" kindref="member">tokenArrayEnd</ref>:</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1a13963bc44bf948eec1968f7ff8e8f5f1" kindref="member">allowDroppedNullPlaceholders_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Un-read&quot;<sp/>the<sp/>current<sp/>token<sp/>and<sp/>mark<sp/>the<sp/>current<sp/>value<sp/>as<sp/>a<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>--;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>v;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(v);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else,<sp/>fall<sp/>through<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight><highlight class="stringliteral">&quot;Syntax<sp/>error:<sp/>value,<sp/>object<sp/>or<sp/>array<sp/>expected.&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" kindref="member">collectComments_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a101eadc45e01c60628b53f0db3d13482" kindref="member">lastValueEnd_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a9f994b6a2227c5d96e6ed6cbc74ed251" kindref="member">lastValue_</ref><sp/>=<sp/>&amp;<ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>();</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>--<ref refid="class_json_1_1_our_reader_1aaa91c93bc064c7086248ea01eddcf51a" kindref="member">stackDepth_</ref>;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>successful;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383" refid="class_json_1_1_our_reader_1a856dea44d92578c276856d7a65a4ebdc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a856dea44d92578c276856d7a65a4ebdc" kindref="member">OurReader::skipCommentTokens</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1ac71bb7ba7363d3b05ed76602b036ce33" kindref="member">allowComments_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(token);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" kindref="member">tokenComment</ref>);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(token);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393" refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">OurReader::readToken</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a6fbc6d58a4505e5ccadf330b57b17ca5" kindref="member">skipSpaces</ref>();</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7495ef5c356d4faa39b702e528cc7e26" kindref="member">tokenObjectBegin</ref>;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca45d229fce2f5f4b52dc0d6c39c853436" kindref="member">tokenArrayBegin</ref>;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" kindref="member">tokenArrayEnd</ref>;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccadb37e59e1e52cd5e7417bc418b611ce1" kindref="member">tokenString</ref>;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a5d39b12671499ec5975f3bbc84b7d438" kindref="member">readString</ref>();</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1abbd6c196d7a22e2a360a59887eda4610" kindref="member">allowSingleQuotes_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccadb37e59e1e52cd5e7417bc418b611ce1" kindref="member">tokenString</ref>;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1ac78592defdc333faf56c6d0908758da3" kindref="member">readStringSingleQuote</ref>();</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" kindref="member">tokenComment</ref>;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a90f6bb9e55b2bc3d6c1880809495c222" kindref="member">readComment</ref>();</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca766aefde855b1246d89b8552240c70d1" kindref="member">tokenNumber</ref>;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aefcb9a78cc45870ccac2db2a66c8ec50" kindref="member">readNumber</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1aefcb9a78cc45870ccac2db2a66c8ec50" kindref="member">readNumber</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca766aefde855b1246d89b8552240c70d1" kindref="member">tokenNumber</ref>;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca3cf3c4c72d6b5969f17f043a34b2ad4c" kindref="member">tokenNegInf</ref>;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1af760f91cc2a7af37e44f78fb466061bb" kindref="member">allowSpecialFloats_</ref><sp/>&amp;&amp;<sp/><ref refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;nfinity&quot;</highlight><highlight class="normal">,<sp/>7);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccac7d2a552afcea291d47cf49dfefaf619" kindref="member">tokenTrue</ref>;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;rue&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccaab91e3ef98c1cb1326c3674e518c5126" kindref="member">tokenFalse</ref>;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;alse&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca4c80b7bb245e3863e38dc8e8586b3c51" kindref="member">tokenNull</ref>;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;ull&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1af760f91cc2a7af37e44f78fb466061bb" kindref="member">allowSpecialFloats_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca167898478691f1ac7a240981ccaa1713" kindref="member">tokenNaN</ref>;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;aN&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1af760f91cc2a7af37e44f78fb466061bb" kindref="member">allowSpecialFloats_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca800c7c7e896d569ebf6c2771eecc7060" kindref="member">tokenPosInf</ref>;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;nfinity&quot;</highlight><highlight class="normal">,<sp/>7);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8ca62ab9091b149d52ec55828f8040f4" kindref="member">tokenArraySeparator</ref>;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7c95881fb1162316bce42c629bf06214" kindref="member">tokenMemberSeparator</ref>;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca735d1f76eafc2c0c581ed79c077aaa7e" kindref="member">tokenEndOfStream</ref>;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccad39f929b971de8dc55fe84a2d2e3465e" kindref="member">tokenError</ref>;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493" refid="class_json_1_1_our_reader_1a6fbc6d58a4505e5ccadf330b57b17ca5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a6fbc6d58a4505e5ccadf330b57b17ca5" kindref="member">OurReader::skipSpaces</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/>*<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503" refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a4a03f1b266def9b47c4fef35386557fb" kindref="member">OurReader::match</ref>(<ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>pattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>patternLength)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>&lt;<sp/>patternLength)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>patternLength;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index--)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>[index]<sp/>!=<sp/>pattern[index])</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>+=<sp/>patternLength;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514" refid="class_json_1_1_our_reader_1a90f6bb9e55b2bc3d6c1880809495c222" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a90f6bb9e55b2bc3d6c1880809495c222" kindref="member">OurReader::readComment</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>commentBegin<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>successful<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1aba784b125baa1b62387e767b791f2f89" kindref="member">readCStyleComment</ref>();</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>successful<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1ae3de80671f0f997053e1c1c8a47a45c5" kindref="member">readCppStyleComment</ref>();</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!successful)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" kindref="member">collectComments_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>CommentPlacement<sp/>placement<sp/>=<sp/>commentBefore;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a101eadc45e01c60628b53f0db3d13482" kindref="member">lastValueEnd_</ref><sp/>&amp;&amp;<sp/>!<ref refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" kindref="member">containsNewLine</ref>(<ref refid="class_json_1_1_our_reader_1a101eadc45e01c60628b53f0db3d13482" kindref="member">lastValueEnd_</ref>,<sp/>commentBegin))<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>||<sp/>!<ref refid="namespace_json_1a4d6ab0f651348832e5cc49b577a854d2" kindref="member">containsNewLine</ref>(commentBegin,<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>))</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placement<sp/>=<sp/>commentAfterOnSameLine;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1ad7318c37469a9106069a236fb4b10e1f" kindref="member">addComment</ref>(commentBegin,<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>,<sp/>placement);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538" refid="class_json_1_1_our_reader_1ad7318c37469a9106069a236fb4b10e1f" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_our_reader_1ad7318c37469a9106069a236fb4b10e1f" kindref="member">OurReader::addComment</ref>(<ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>begin,<sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>end,<sp/>CommentPlacement<sp/>placement)<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>assert(<ref refid="class_json_1_1_our_reader_1a259f6ac988da2894bcafc670e42f73ad" kindref="member">collectComments_</ref>);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>normalized<sp/>=<sp/><ref refid="namespace_json_1a2e6b8616041876128cbef54b8c75da62" kindref="member">normalizeEOL</ref>(begin,<sp/>end);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(placement<sp/>==<sp/>commentAfterOnSameLine)<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="class_json_1_1_our_reader_1a9f994b6a2227c5d96e6ed6cbc74ed251" kindref="member">lastValue_</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a9f994b6a2227c5d96e6ed6cbc74ed251" kindref="member">lastValue_</ref>-&gt;setComment(normalized,<sp/>placement);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2e8fd643b2e85155f5292db8fc9c6084" kindref="member">commentsBefore_</ref><sp/>+=<sp/>normalized;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549" refid="class_json_1_1_our_reader_1aba784b125baa1b62387e767b791f2f89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aba784b125baa1b62387e767b791f2f89" kindref="member">OurReader::readCStyleComment</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558" refid="class_json_1_1_our_reader_1ae3de80671f0f997053e1c1c8a47a45c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ae3de80671f0f997053e1c1c8a47a45c5" kindref="member">OurReader::readCppStyleComment</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Consume<sp/>DOS<sp/>EOL.<sp/>It<sp/>will<sp/>be<sp/>normalized<sp/>in<sp/>addComment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>&amp;&amp;<sp/>*<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Break<sp/>on<sp/>Moc<sp/>OS<sp/>9<sp/>EOL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574" refid="class_json_1_1_our_reader_1aefcb9a78cc45870ccac2db2a66c8ec50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aefcb9a78cc45870ccac2db2a66c8ec50" kindref="member">OurReader::readNumber</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkInf)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkInf<sp/>&amp;&amp;<sp/>p<sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>++p;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>stopgap<sp/>for<sp/>already<sp/>consumed<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>p)<sp/>&lt;<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>p)<sp/>&lt;<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>p)<sp/>&lt;<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exponential<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>p)<sp/>&lt;<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>p)<sp/>&lt;<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>p)<sp/>&lt;<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>?<sp/>*p++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1600" refid="class_json_1_1_our_reader_1a5d39b12671499ec5975f3bbc84b7d438" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5d39b12671499ec5975f3bbc84b7d438" kindref="member">OurReader::readString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613" refid="class_json_1_1_our_reader_1ac78592defdc333faf56c6d0908758da3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ac78592defdc333faf56c6d0908758da3" kindref="member">OurReader::readStringSingleQuote</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">getNextChar</ref>();</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625" refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" kindref="member">OurReader::readObject</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>tokenStart)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>tokenName;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>Value<sp/>init(objectValue);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(init);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(tokenStart.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(tokenName))<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initialTokenOk<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tokenName.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" kindref="member">tokenComment</ref><sp/>&amp;&amp;<sp/>initialTokenOk)</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialTokenOk<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(tokenName);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialTokenOk)</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tokenName.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref><sp/>&amp;&amp;<sp/>name.empty())<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tokenName.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccadb37e59e1e52cd5e7417bc418b611ce1" kindref="member">tokenString</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" kindref="member">decodeString</ref>(tokenName,<sp/>name))</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a035651f0700a76a815e5f904c63ebb1c" kindref="member">recoverFromError</ref>(<ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tokenName.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca766aefde855b1246d89b8552240c70d1" kindref="member">tokenNumber</ref><sp/>&amp;&amp;<sp/><ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1af6973fc7e774ce2d634ba99442aeb91a" kindref="member">allowNumericKeys_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>numberName;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" kindref="member">decodeNumber</ref>(tokenName,<sp/>numberName))</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a035651f0700a76a815e5f904c63ebb1c" kindref="member">recoverFromError</ref>(<ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>numberName.asString();</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>colon;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(colon)<sp/>||<sp/>colon.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca7c95881fb1162316bce42c629bf06214" kindref="member">tokenMemberSeparator</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ae68a7047acd692be8077e259d524c6d9" kindref="member">addErrorAndRecover</ref>(</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;:&apos;<sp/>after<sp/>object<sp/>member<sp/>name&quot;</highlight><highlight class="normal">,<sp/>colon,<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.length()<sp/>&gt;=<sp/>(1U&lt;&lt;30))<sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;keylength<sp/>&gt;=<sp/>2^30&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a2714302d5cc54ca2ce4118ea51c0397a" kindref="member">features_</ref>.<ref refid="class_json_1_1_our_features_1a39b8e0b86b1c24a45e800c023bb715aa" kindref="member">rejectDupKeys_</ref><sp/>&amp;&amp;<sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().isMember(name))<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Duplicate<sp/>key:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ae68a7047acd692be8077e259d524c6d9" kindref="member">addErrorAndRecover</ref>(</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>tokenName,<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>Value&amp;<sp/>value<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>()[name];</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.push(&amp;value);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" kindref="member">readValue</ref>();</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.pop();</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/></highlight><highlight class="comment">//<sp/>error<sp/>already<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a035651f0700a76a815e5f904c63ebb1c" kindref="member">recoverFromError</ref>(<ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>comma;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(comma)<sp/>||</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(comma.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref><sp/>&amp;&amp;<sp/>comma.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8ca62ab9091b149d52ec55828f8040f4" kindref="member">tokenArraySeparator</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comma.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" kindref="member">tokenComment</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ae68a7047acd692be8077e259d524c6d9" kindref="member">addErrorAndRecover</ref>(</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;,&apos;<sp/>or<sp/>&apos;}&apos;<sp/>in<sp/>object<sp/>declaration&quot;</highlight><highlight class="normal">,<sp/>comma,<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>finalizeTokenOk<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(comma.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" kindref="member">tokenComment</ref><sp/>&amp;&amp;<sp/>finalizeTokenOk)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finalizeTokenOk<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(comma);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comma.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ae68a7047acd692be8077e259d524c6d9" kindref="member">addErrorAndRecover</ref>(</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;}&apos;<sp/>or<sp/>object<sp/>member<sp/>name&quot;</highlight><highlight class="normal">,<sp/>tokenName,<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8d7e94be97d76ea1c314130b5aabb014" kindref="member">tokenObjectEnd</ref>);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687" refid="class_json_1_1_our_reader_1a0b9f58faf4212c6ecb5d8e2a1ac10257" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a0b9f58faf4212c6ecb5d8e2a1ac10257" kindref="member">OurReader::readArray</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>tokenStart)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>Value<sp/>init(arrayValue);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(init);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(tokenStart.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a6fbc6d58a4505e5ccadf330b57b17ca5" kindref="member">skipSpaces</ref>();</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>endArray;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(endArray);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>Value&amp;<sp/>value<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>()[index++];</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.push(&amp;value);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" kindref="member">readValue</ref>();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.pop();</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/></highlight><highlight class="comment">//<sp/>error<sp/>already<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a035651f0700a76a815e5f904c63ebb1c" kindref="member">recoverFromError</ref>(<ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" kindref="member">tokenArrayEnd</ref>);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>Comment<sp/>after<sp/>last<sp/>item<sp/>in<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(token);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca777fb6589fdbe225bc10a1e49a090da9" kindref="member">tokenComment</ref><sp/>&amp;&amp;<sp/>ok)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(token);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>badTokenType<sp/>=</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca8ca62ab9091b149d52ec55828f8040f4" kindref="member">tokenArraySeparator</ref><sp/>&amp;&amp;<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" kindref="member">tokenArrayEnd</ref>);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok<sp/>||<sp/>badTokenType)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ae68a7047acd692be8077e259d524c6d9" kindref="member">addErrorAndRecover</ref>(</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>&apos;,&apos;<sp/>or<sp/>&apos;]&apos;<sp/>in<sp/>array<sp/>declaration&quot;</highlight><highlight class="normal">,<sp/>token,<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" kindref="member">tokenArrayEnd</ref>);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca59a4f42b50d9731dce6be41818c3d91b" kindref="member">tokenArrayEnd</ref>)</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725" refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" kindref="member">OurReader::decodeNumber</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>Value<sp/>decoded;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" kindref="member">decodeNumber</ref>(token,<sp/>decoded))</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(decoded);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735" refid="class_json_1_1_our_reader_1a712270d53a2f023c2f406ac813548340" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" kindref="member">OurReader::decodeNumber</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>Value&amp;<sp/>decoded)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempts<sp/>to<sp/>parse<sp/>the<sp/>number<sp/>as<sp/>an<sp/>integer.<sp/>If<sp/>the<sp/>number<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>larger<sp/>than<sp/>the<sp/>maximum<sp/>supported<sp/>value<sp/>of<sp/>an<sp/>integer<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>decode<sp/>the<sp/>number<sp/>as<sp/>a<sp/>double.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>current<sp/>=<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegative<sp/>=<sp/>*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Help<sp/>the<sp/>compiler<sp/>do<sp/>the<sp/>div<sp/>and<sp/>mod<sp/>at<sp/>compile<sp/>time<sp/>or<sp/>get<sp/>rid<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>Value::LargestUInt<sp/>maxIntegerValue<sp/>=</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isNegative<sp/>?<sp/>Value::LargestUInt(-Value::minLargestInt)</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Value::maxLargestUInt;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>Value::LargestUInt<sp/>threshold<sp/>=<sp/>maxIntegerValue<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>Value::LargestUInt<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>&lt;<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>&apos;0&apos;<sp/>||<sp/>c<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" kindref="member">decodeDouble</ref>(token,<sp/>decoded);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>Value::UInt<sp/>digit(static_cast&lt;Value::UInt&gt;(c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;=<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>hit<sp/>or<sp/>exceeded<sp/>the<sp/>max<sp/>value<sp/>divided<sp/>by<sp/>10<sp/>(rounded<sp/>down).<sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a)<sp/>we&apos;ve<sp/>only<sp/>just<sp/>touched<sp/>the<sp/>limit,<sp/>b)<sp/>this<sp/>is<sp/>the<sp/>last<sp/>digit,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c)<sp/>it&apos;s<sp/>small<sp/>enough<sp/>to<sp/>fit<sp/>in<sp/>that<sp/>rounding<sp/>delta,<sp/>we&apos;re<sp/>okay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>treat<sp/>this<sp/>number<sp/>as<sp/>a<sp/>double<sp/>to<sp/>avoid<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>threshold<sp/>||<sp/>current<sp/>!=<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>||</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>&gt;<sp/>maxIntegerValue<sp/>%<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" kindref="member">decodeDouble</ref>(token,<sp/>decoded);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>value<sp/>*<sp/>10<sp/>+<sp/>digit;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>-Value::LargestInt(value);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;=<sp/>Value::LargestUInt(Value::maxInt))</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>Value::LargestInt(value);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775" refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" kindref="member">OurReader::decodeDouble</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>Value<sp/>decoded;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" kindref="member">decodeDouble</ref>(token,<sp/>decoded))</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(decoded);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785" refid="class_json_1_1_our_reader_1aa5c15a8cd32754f07430dedba3d1308e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" kindref="member">OurReader::decodeDouble</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>Value&amp;<sp/>decoded)<sp/>{</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufferSize<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check<sp/>to<sp/>avoid<sp/>buffer<sp/>overflow<sp/>exploits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>parse<sp/>token<sp/>length&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ulength<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(length);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>using<sp/>a<sp/>string<sp/>constant<sp/>for<sp/>the<sp/>format<sp/>control<sp/>string<sp/>given<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sscanf,<sp/>as<sp/>this<sp/>can<sp/>cause<sp/>hard<sp/>to<sp/>debug<sp/>crashes<sp/>on<sp/>OS<sp/>X.<sp/>See<sp/>here<sp/>for<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>info:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://developer.apple.com/library/mac/#DOCUMENTATION/DeveloperTools/gcc-4.0.1/gcc/Incompatibilities.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>format[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;=<sp/>bufferSize)<sp/>{</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>buffer[bufferSize<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buffer,<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref>,<sp/>ulength);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>sscanf(buffer,<sp/>format,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>buffer(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref>,<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref>);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>sscanf(buffer.c_str(),<sp/>format,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref>,<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref>)<sp/>+</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>not<sp/>a<sp/>number.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>decoded<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822" refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" kindref="member">OurReader::decodeString</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>std::string<sp/>decoded_string;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" kindref="member">decodeString</ref>(token,<sp/>decoded_string))</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>Value<sp/>decoded(decoded_string);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().swapPayload(decoded);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetStart(token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">currentValue</ref>().setOffsetLimit(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833" refid="class_json_1_1_our_reader_1a44b589a85f02f0e2de1b4ad6916be0c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" kindref="member">OurReader::decodeString</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>std::string&amp;<sp/>decoded)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>decoded.reserve(static_cast&lt;size_t&gt;(token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>current<sp/>=<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&apos;&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>end<sp/>=<sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>include<sp/>&apos;&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight><highlight class="stringliteral">&quot;Empty<sp/>escape<sp/>sequence<sp/>in<sp/>string&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>current);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>escape<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(escape)<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unicode;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1ac1bf03c161ece082e48da450c50f528d" kindref="member">decodeUnicodeCodePoint</ref>(token,<sp/>current,<sp/>end,<sp/>unicode))</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/><ref refid="namespace_json_1adf0456e397a18cd7218a7b51dfc13c73" kindref="member">codePointToUTF8</ref>(unicode);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>escape<sp/>sequence<sp/>in<sp/>string&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>current);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886" refid="class_json_1_1_our_reader_1ac1bf03c161ece082e48da450c50f528d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ac1bf03c161ece082e48da450c50f528d" kindref="member">OurReader::decodeUnicodeCodePoint</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref>&amp;<sp/>current,</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>end,</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>unicode)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1adb39be814cc6076b91a0919bdd5b24b0" kindref="member">decodeUnicodeEscapeSequence</ref>(token,<sp/>current,<sp/>end,<sp/>unicode))</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicode<sp/>&gt;=<sp/>0xD800<sp/>&amp;&amp;<sp/>unicode<sp/>&lt;=<sp/>0xDBFF)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>surrogate<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>current<sp/>&lt;<sp/>6)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;additional<sp/>six<sp/>characters<sp/>expected<sp/>to<sp/>parse<sp/>unicode<sp/>surrogate<sp/>pair.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surrogatePair;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(current++)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*(current++)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1adb39be814cc6076b91a0919bdd5b24b0" kindref="member">decodeUnicodeEscapeSequence</ref>(token,<sp/>current,<sp/>end,<sp/>surrogatePair))<sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>=<sp/>0x10000<sp/>+<sp/>((unicode<sp/>&amp;<sp/>0x3FF)<sp/>&lt;&lt;<sp/>10)<sp/>+<sp/>(surrogatePair<sp/>&amp;<sp/>0x3FF);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight><highlight class="stringliteral">&quot;expecting<sp/>another<sp/>\\u<sp/>token<sp/>to<sp/>begin<sp/>the<sp/>second<sp/>half<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>unicode<sp/>surrogate<sp/>pair&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915" refid="class_json_1_1_our_reader_1adb39be814cc6076b91a0919bdd5b24b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1adb39be814cc6076b91a0919bdd5b24b0" kindref="member">OurReader::decodeUnicodeEscapeSequence</ref>(<ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref>&amp;<sp/>current,</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>end,</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>ret_unicode)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>current<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>unicode<sp/>escape<sp/>sequence<sp/>in<sp/>string:<sp/>four<sp/>digits<sp/>expected.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unicode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>4;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>unicode<sp/>*=<sp/>16;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>+=<sp/>c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>+=<sp/>c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode<sp/>+=<sp/>c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>unicode<sp/>escape<sp/>sequence<sp/>in<sp/>string:<sp/>hexadecimal<sp/>digit<sp/>expected.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token,</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>ret_unicode<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(unicode);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945" refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">OurReader::addError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_error_info" kindref="compound">ErrorInfo</ref><sp/>info;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" kindref="member">token_</ref><sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a9c973ff4d2c47134b770027d5d37d906" kindref="member">message_</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a77ba2d32a471c7b9bc14621b76a5bdab" kindref="member">extra_</ref><sp/>=<sp/>extra;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.push_back(info);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954" refid="class_json_1_1_our_reader_1a035651f0700a76a815e5f904c63ebb1c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a035651f0700a76a815e5f904c63ebb1c" kindref="member">OurReader::recoverFromError</ref>(<ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcc" kindref="member">TokenType</ref><sp/>skipUntilToken)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>errorCount<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.size();</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>skip;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1a0d1e66da47fe2e85f5033c59326dfdc3" kindref="member">readToken</ref>(skip))</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.resize(errorCount);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>errors<sp/>caused<sp/>by<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skip.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/>skipUntilToken<sp/>||<sp/>skip.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcca735d1f76eafc2c0c581ed79c077aaa7e" kindref="member">tokenEndOfStream</ref>)</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.resize(errorCount);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967" refid="class_json_1_1_our_reader_1ae68a7047acd692be8077e259d524c6d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1ae68a7047acd692be8077e259d524c6d9" kindref="member">OurReader::addErrorAndRecover</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dcc" kindref="member">TokenType</ref><sp/>skipUntilToken)<sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5a48b71c1c16fa671814c8338e452bc0" kindref="member">addError</ref>(message,<sp/>token);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a035651f0700a76a815e5f904c63ebb1c" kindref="member">recoverFromError</ref>(skipUntilToken);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974" refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" refkind="member"><highlight class="normal">Value&amp;<sp/><ref refid="class_json_1_1_our_reader_1a2acd5b1d53e7d7e17c21ff8e96edc09d" kindref="member">OurReader::currentValue</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(<ref refid="class_json_1_1_our_reader_1a19cc4e8c5d17ee6822f752e9a36f4ce3" kindref="member">nodes_</ref>.top());<sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976" refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">OurReader::Char</ref><sp/><ref refid="class_json_1_1_our_reader_1a298285d035fdbc554caae09d9f0a5859" kindref="member">OurReader::getNextChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>==<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>)</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>++;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982" refid="class_json_1_1_our_reader_1a9f47ad324225df1e68bda7dc451845c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a9f47ad324225df1e68bda7dc451845c9" kindref="member">OurReader::getLocationLineAndColumn</ref>(<ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>location,</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>line,</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>column)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>current<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>lastLineStart<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>&lt;<sp/>location<sp/>&amp;&amp;<sp/>current<sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1a0cd0bab4caa66594ab843ccd5f9dc239" kindref="member">Char</ref><sp/>c<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastLineStart<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastLineStart<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>&amp;<sp/>line<sp/>start<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>column<sp/>=<sp/>int(location<sp/>-<sp/>lastLineStart)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005" refid="class_json_1_1_our_reader_1a579a7d2e493f63c4b122103844e3cedd" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_json_1_1_our_reader_1a9f47ad324225df1e68bda7dc451845c9" kindref="member">OurReader::getLocationLineAndColumn</ref>(<ref refid="class_json_1_1_our_reader_1a1bdc7bbc52ba87cae6b19746f2ee0189" kindref="member">Location</ref><sp/>location)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>column;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a9f47ad324225df1e68bda7dc451845c9" kindref="member">getLocationLineAndColumn</ref>(location,<sp/>line,<sp/>column);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[18<sp/>+<sp/>16<sp/>+<sp/>16<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>%d,<sp/>Column<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>line,<sp/>column);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013" refid="class_json_1_1_our_reader_1ae9cbb7dbd9c6c96be37432e8dfa1afcb" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_json_1_1_our_reader_1ae9cbb7dbd9c6c96be37432e8dfa1afcb" kindref="member">OurReader::getFormattedErrorMessages</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/>std::string<sp/>formattedMessage;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Errors::const_iterator<sp/>itError<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.begin();</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itError<sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.end();</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itError)<sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1_1_error_info" kindref="compound">ErrorInfo</ref>&amp;<sp/>error<sp/>=<sp/>*itError;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>formattedMessage<sp/>+=</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;*<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_json_1_1_our_reader_1a9f47ad324225df1e68bda7dc451845c9" kindref="member">getLocationLineAndColumn</ref>(error.<ref refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" kindref="member">token_</ref>.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>formattedMessage<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>error.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a9c973ff4d2c47134b770027d5d37d906" kindref="member">message_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a77ba2d32a471c7b9bc14621b76a5bdab" kindref="member">extra_</ref>)</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formattedMessage<sp/>+=</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_json_1_1_our_reader_1a9f47ad324225df1e68bda7dc451845c9" kindref="member">getLocationLineAndColumn</ref>(error.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a77ba2d32a471c7b9bc14621b76a5bdab" kindref="member">extra_</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>detail.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formattedMessage;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029" refid="class_json_1_1_our_reader_1a02ef7871af3706754a233c36e6d489e9" refkind="member"><highlight class="normal">std::vector&lt;OurReader::StructuredError&gt;<sp/><ref refid="class_json_1_1_our_reader_1a02ef7871af3706754a233c36e6d489e9" kindref="member">OurReader::getStructuredErrors</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>std::vector&lt;OurReader::StructuredError&gt;<sp/>allErrors;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Errors::const_iterator<sp/>itError<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.begin();</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itError<sp/>!=<sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.end();</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itError)<sp/>{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1_1_error_info" kindref="compound">ErrorInfo</ref>&amp;<sp/>error<sp/>=<sp/>*itError;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_our_reader_1_1_structured_error" kindref="compound">OurReader::StructuredError</ref><sp/>structured;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>structured.<ref refid="struct_json_1_1_our_reader_1_1_structured_error_1a102677698afb8177c985e72dafe72b15" kindref="member">offset_start</ref><sp/>=<sp/>error.<ref refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" kindref="member">token_</ref>.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>structured.<ref refid="struct_json_1_1_our_reader_1_1_structured_error_1a15491a751a39c5153af04e68b1d0abb9" kindref="member">offset_limit</ref><sp/>=<sp/>error.<ref refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" kindref="member">token_</ref>.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>structured.<ref refid="struct_json_1_1_our_reader_1_1_structured_error_1adc8a757b6452cc6ab14fb90b933b3414" kindref="member">message</ref><sp/>=<sp/>error.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a9c973ff4d2c47134b770027d5d37d906" kindref="member">message_</ref>;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>allErrors.push_back(structured);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allErrors;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044" refid="class_json_1_1_our_reader_1aef7aa4ca22ffaa38c401b16951d20e1e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aef7aa4ca22ffaa38c401b16951d20e1e" kindref="member">OurReader::pushError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/>length<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value.getOffsetStart()<sp/>&gt;<sp/>length</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>value.getOffsetLimit()<sp/>&gt;<sp/>length)</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccad39f929b971de8dc55fe84a2d2e3465e" kindref="member">tokenError</ref>;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>=<sp/>begin_<sp/>+<sp/>value.getOffsetStart();</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>+<sp/>value.getOffsetLimit();</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_error_info" kindref="compound">ErrorInfo</ref><sp/>info;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" kindref="member">token_</ref><sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a9c973ff4d2c47134b770027d5d37d906" kindref="member">message_</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a77ba2d32a471c7b9bc14621b76a5bdab" kindref="member">extra_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.push_back(info);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061" refid="class_json_1_1_our_reader_1ad43315cbb0d6804e3b7177e84a1ec53d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aef7aa4ca22ffaa38c401b16951d20e1e" kindref="member">OurReader::pushError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>extra)<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/>length<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1ab1f69b0260c27a0d2d65dc56e42c8f9d" kindref="member">end_</ref><sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a9bda9d72335d52cd06e65f9eca3f70f5" kindref="member">begin_</ref>;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value.getOffsetStart()<sp/>&gt;<sp/>length</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>value.getOffsetLimit()<sp/>&gt;<sp/>length</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>extra.getOffsetLimit()<sp/>&gt;<sp/>length)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_token" kindref="compound">Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1abe7d858530396fa7e1293f7a579880ed" kindref="member">type_</ref><sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a15116f7276ddf1e7a2cc3cbefa884dccad39f929b971de8dc55fe84a2d2e3465e" kindref="member">tokenError</ref>;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1aedf68bb00eaaa9d3c22b9825999602ac" kindref="member">start_</ref><sp/>=<sp/>begin_<sp/>+<sp/>value.getOffsetStart();</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/>token.<ref refid="class_json_1_1_our_reader_1_1_token_1a67d2071638add857528579ae3791eccc" kindref="member">end_</ref><sp/>=<sp/>begin_<sp/>+<sp/>value.getOffsetLimit();</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1_1_error_info" kindref="compound">ErrorInfo</ref><sp/>info;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1ad05204ecabe5e7201a842935b874ae9a" kindref="member">token_</ref><sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a9c973ff4d2c47134b770027d5d37d906" kindref="member">message_</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>info.<ref refid="class_json_1_1_our_reader_1_1_error_info_1a77ba2d32a471c7b9bc14621b76a5bdab" kindref="member">extra_</ref><sp/>=<sp/>begin_<sp/>+<sp/>extra.getOffsetStart();</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.push_back(info);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079" refid="class_json_1_1_our_reader_1a048346238d703ad9aed06beb686e6102" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a048346238d703ad9aed06beb686e6102" kindref="member">OurReader::good</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="class_json_1_1_our_reader_1afb76b68ba1ab68fe09cf2838e3d4898d" kindref="member">errors_</ref>.size();</highlight></codeline>
<codeline lineno="2081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084" refid="class_json_1_1_our_char_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_json_1_1_our_char_reader" kindref="compound">OurCharReader</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CharReader<sp/>{</highlight></codeline>
<codeline lineno="2085" refid="class_json_1_1_our_char_reader_1aa6afd3d0f754cadad0f6d2be38bcfee0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_char_reader_1aa6afd3d0f754cadad0f6d2be38bcfee0" kindref="member">collectComments_</ref>;</highlight></codeline>
<codeline lineno="2086" refid="class_json_1_1_our_char_reader_1aedd4520b8570654ed7aa0726075ee58d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader" kindref="compound">OurReader</ref><sp/><ref refid="class_json_1_1_our_char_reader_1aedd4520b8570654ed7aa0726075ee58d" kindref="member">reader_</ref>;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2088" refid="class_json_1_1_our_char_reader_1a5015506620e7ba7bab417756fa1ca9fe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_char_reader_1a5015506620e7ba7bab417756fa1ca9fe" kindref="member">OurCharReader</ref>(</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collectComments,</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>features)</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>:<sp/>collectComments_(collectComments)</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>,<sp/>reader_(features)</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2094" refid="class_json_1_1_our_char_reader_1a52a1fb5fee88d9b63dd462f63b1c9570" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_char_reader_1a52a1fb5fee88d9b63dd462f63b1c9570" kindref="member">parse</ref>(</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>beginDoc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>endDoc,</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value*<sp/>root,<sp/>std::string*<sp/>errs)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>reader_.<ref refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" kindref="member">parse</ref>(beginDoc,<sp/>endDoc,<sp/>*root,<sp/>collectComments_);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errs)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*errs<sp/>=<sp/>reader_.<ref refid="class_json_1_1_our_reader_1ae9cbb7dbd9c6c96be37432e8dfa1afcb" kindref="member">getFormattedErrorMessages</ref>();</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal">CharReaderBuilder::CharReaderBuilder()</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/>setDefaults(&amp;settings_);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal">CharReaderBuilder::~CharReaderBuilder()</highlight></codeline>
<codeline lineno="2110"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal">CharReader*<sp/>CharReaderBuilder::newCharReader()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2112"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collectComments<sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;collectComments&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_features" kindref="compound">OurFeatures</ref><sp/>features<sp/>=<sp/><ref refid="class_json_1_1_our_features_1a0686e1406b6677f496529f9f3fe98d1e" kindref="member">OurFeatures::all</ref>();</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1ac71bb7ba7363d3b05ed76602b036ce33" kindref="member">allowComments_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;allowComments&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1a2095f66a776c0a4ae6cc931a0c94242e" kindref="member">strictRoot_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;strictRoot&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1a13963bc44bf948eec1968f7ff8e8f5f1" kindref="member">allowDroppedNullPlaceholders_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;allowDroppedNullPlaceholders&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1af6973fc7e774ce2d634ba99442aeb91a" kindref="member">allowNumericKeys_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;allowNumericKeys&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1abbd6c196d7a22e2a360a59887eda4610" kindref="member">allowSingleQuotes_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;allowSingleQuotes&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1a9a786713902d14be6d57a08cc03ccfff" kindref="member">stackLimit_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;stackLimit&quot;</highlight><highlight class="normal">].asInt();</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1ae8ad25b90706c78f1a8fe929191ac61b" kindref="member">failIfExtra_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;failIfExtra&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1a39b8e0b86b1c24a45e800c023bb715aa" kindref="member">rejectDupKeys_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;rejectDupKeys&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/>features.<ref refid="class_json_1_1_our_features_1af760f91cc2a7af37e44f78fb466061bb" kindref="member">allowSpecialFloats_</ref><sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;allowSpecialFloats&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_char_reader" kindref="compound">OurCharReader</ref>(collectComments,<sp/>features);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2126" refid="namespace_json_1a8fedd83f49c9a9109d503b2b1d4824aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a8fedd83f49c9a9109d503b2b1d4824aa" kindref="member">getValidReaderKeys</ref>(std::set&lt;std::string&gt;*<sp/>valid_keys)</highlight></codeline>
<codeline lineno="2127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/>valid_keys-&gt;clear();</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;collectComments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;allowComments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;strictRoot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;allowDroppedNullPlaceholders&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;allowNumericKeys&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;allowSingleQuotes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;stackLimit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;failIfExtra&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;rejectDupKeys&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;allowSpecialFloats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CharReaderBuilder::validate(Json::Value*<sp/>invalid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2141"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>Json::Value<sp/>my_invalid;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!invalid)<sp/>invalid<sp/>=<sp/>&amp;my_invalid;<sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>test<sp/>for<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>Json::Value&amp;<sp/>inv<sp/>=<sp/>*invalid;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>std::set&lt;std::string&gt;<sp/>valid_keys;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1a8fedd83f49c9a9109d503b2b1d4824aa" kindref="member">getValidReaderKeys</ref>(&amp;valid_keys);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/>Value::Members<sp/>keys<sp/>=<sp/>settings_.getMemberNames();</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>keys.size();</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key<sp/>=<sp/>keys[i];</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_keys.find(key)<sp/>==<sp/>valid_keys.end())<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv[key]<sp/>=<sp/>settings_[key];</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0u<sp/>==<sp/>inv.size();</highlight></codeline>
<codeline lineno="2156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal">Value&amp;<sp/>CharReaderBuilder::operator[](std::string<sp/>key)</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings_[key];</highlight></codeline>
<codeline lineno="2160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CharReaderBuilder::strictMode(Json::Value*<sp/>settings)</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowComments&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;strictRoot&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowDroppedNullPlaceholders&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowNumericKeys&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowSingleQuotes&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;stackLimit&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;failIfExtra&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;rejectDupKeys&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowSpecialFloats&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CharReaderBuilder::setDefaults(Json::Value*<sp/>settings)</highlight></codeline>
<codeline lineno="2178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;collectComments&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowComments&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;strictRoot&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowDroppedNullPlaceholders&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowNumericKeys&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowSingleQuotes&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;stackLimit&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;failIfExtra&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;rejectDupKeys&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;allowSpecialFloats&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="comment">//<sp/>global<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196" refid="namespace_json_1a7b90be78407a3a1f241b2a3048ef3d19" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a7b90be78407a3a1f241b2a3048ef3d19" kindref="member">parseFromStream</ref>(</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>CharReader::Factory<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>fact,<sp/>std::istream&amp;<sp/>sin,</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>Value*<sp/>root,<sp/>std::string*<sp/>errs)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>ssin;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>ssin<sp/>&lt;&lt;<sp/>sin.rdbuf();</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>std::string<sp/>doc<sp/>=<sp/>ssin.str();</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>begin<sp/>=<sp/>doc.data();</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>begin<sp/>+<sp/>doc.size();</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>do<sp/>not<sp/>actually<sp/>need<sp/>a<sp/>null-terminator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/>CharReaderPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reader(fact.newCharReader());</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader-&gt;parse(begin,<sp/>end,<sp/>root,<sp/>errs);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210" refid="namespace_json_1a2434499c0c7f057890b32787c05fc4a3" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespace_json_1a2434499c0c7f057890b32787c05fc4a3" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>sin,<sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/>CharReaderBuilder<sp/>b;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/>std::string<sp/>errs;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="namespace_json_1a7b90be78407a3a1f241b2a3048ef3d19" kindref="member">parseFromStream</ref>(b,<sp/>sin,<sp/>&amp;root,<sp/>&amp;errs);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>from<sp/>reader:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errs.c_str());</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(errs);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sin;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_reader.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Beginning<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_valueiterator.inl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2007-2010<sp/>Baptiste<sp/>Lepilleur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>MIT<sp/>license,<sp/>or<sp/>public<sp/>domain<sp/>if<sp/>desired<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized<sp/>in<sp/>your<sp/>jurisdiction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>LICENSE<sp/>for<sp/>detail<sp/>or<sp/>copy<sp/>at<sp/>http://jsoncpp.sourceforge.net/LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included<sp/>by<sp/>json_value.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_json" kindref="compound">Json</ref><sp/>{</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ValueIteratorBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal">ValueIteratorBase::ValueIteratorBase()</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>(),<sp/>isNull_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">ValueIteratorBase::ValueIteratorBase(</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::ObjectValues::iterator&amp;<sp/>current)</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>(current),<sp/>isNull_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal">Value&amp;<sp/>ValueIteratorBase::deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>-&gt;second;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ValueIteratorBase::increment()<sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>++<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ValueIteratorBase::decrement()<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>--<ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal">ValueIteratorBase::difference_type</highlight></codeline>
<codeline lineno="2277"><highlight class="normal">ValueIteratorBase::computeDistance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SelfType&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL_SMALLMAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.current_<sp/>-<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator<sp/>for<sp/>null<sp/>value<sp/>are<sp/>initialized<sp/>using<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor,<sp/>which<sp/>initialize<sp/>current_<sp/>to<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::map::iterator.<sp/>As<sp/>begin()<sp/>and<sp/>end()<sp/>are<sp/>two<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>default<sp/>std::map::iterator,<sp/>they<sp/>can<sp/>not<sp/>be<sp/>compared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>allow<sp/>this,<sp/>we<sp/>handle<sp/>this<sp/>comparison<sp/>specifically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNull_<sp/>&amp;&amp;<sp/>other.isNull_)<sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Usage<sp/>of<sp/>std::distance<sp/>is<sp/>not<sp/>portable<sp/>(does<sp/>not<sp/>compile<sp/>with<sp/>Sun<sp/>Studio<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RogueWave<sp/>STL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>the<sp/>one<sp/>used<sp/>by<sp/>default).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>portable<sp/>hand-made<sp/>version<sp/>for<sp/>non<sp/>random<sp/>iterator<sp/>instead:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>difference_type(<sp/>std::distance(<sp/>current_,<sp/>other.current_<sp/>)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/>difference_type<sp/>myDistance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Value::ObjectValues::iterator<sp/>it<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref>;<sp/>it<sp/>!=<sp/>other.current_;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>++myDistance;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myDistance;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValueIteratorBase::isEqual(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SelfType&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNull_)<sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.isNull_;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>==<sp/>other.current_;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ValueIteratorBase::copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SelfType&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1a5211fbbba94be80a22dd2317c621efcc" kindref="member">current_</ref><sp/>=<sp/>other.current_;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/>isNull_<sp/>=<sp/>other.isNull_;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal">Value<sp/>ValueIteratorBase::key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::CZString<sp/>czstring<sp/>=<sp/>(*current_).first;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(czstring.data())<sp/>{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(czstring.isStaticString())</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value(StaticString(czstring.data()));</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value(czstring.data(),<sp/>czstring.data()<sp/>+<sp/>czstring.length());</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value(czstring.index());</highlight></codeline>
<codeline lineno="2324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal">UInt<sp/>ValueIteratorBase::index()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::CZString<sp/>czstring<sp/>=<sp/>(*current_).first;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!czstring.data())</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>czstring.index();</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value::UInt(-1);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal">std::string<sp/>ValueIteratorBase::name()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>keey;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>keey<sp/>=<sp/>memberName(&amp;end);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!keey)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(keey,<sp/>end);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>ValueIteratorBase::memberName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cname<sp/>=<sp/>(*current_).first.data();</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cname<sp/>?<sp/>cname<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>ValueIteratorBase::memberName(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>end)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cname<sp/>=<sp/>(*current_).first.data();</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cname)<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>*end<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>*end<sp/>=<sp/>cname<sp/>+<sp/>(*current_).first.length();</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cname;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ValueConstIterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal">ValueConstIterator::ValueConstIterator()<sp/>{}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal">ValueConstIterator::ValueConstIterator(</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::ObjectValues::iterator&amp;<sp/>current)</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ValueIteratorBase(current)<sp/>{}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal">ValueConstIterator::ValueConstIterator(ValueIterator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ValueIteratorBase(other)<sp/>{}</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal">ValueConstIterator&amp;<sp/>ValueConstIterator::</highlight></codeline>
<codeline lineno="2374"><highlight class="normal">operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueIteratorBase&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/>copy(other);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ValueIterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal">ValueIterator::ValueIterator()<sp/>{}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal">ValueIterator::ValueIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::ObjectValues::iterator&amp;<sp/>current)</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ValueIteratorBase(current)<sp/>{}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal">ValueIterator::ValueIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueConstIterator&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ValueIteratorBase(other)<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;ConstIterator<sp/>to<sp/>Iterator<sp/>should<sp/>never<sp/>be<sp/>allowed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal">ValueIterator::ValueIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueIterator&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ValueIteratorBase(other)<sp/>{}</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal">ValueIterator&amp;<sp/>ValueIterator::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SelfType&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/>copy(other);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_valueiterator.inl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Beginning<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_value.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2011<sp/>Baptiste<sp/>Lepilleur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>MIT<sp/>license,<sp/>or<sp/>public<sp/>domain<sp/>if<sp/>desired<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized<sp/>in<sp/>your<sp/>jurisdiction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>LICENSE<sp/>for<sp/>detail<sp/>or<sp/>copy<sp/>at<sp/>http://jsoncpp.sourceforge.net/LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/assertions.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/value.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/writer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cpptl/conststring.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>min()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441" refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_ASSERT_UNREACHABLE<sp/>assert(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_json" kindref="compound">Json</ref><sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>walkaround<sp/>to<sp/>avoid<sp/>the<sp/>static<sp/>initialization<sp/>of<sp/>Value::null.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>kNull<sp/>must<sp/>be<sp/>word-aligned<sp/>to<sp/>avoid<sp/>crashing<sp/>on<sp/>ARM.<sp/><sp/>We<sp/>use<sp/>an<sp/>alignment<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>8<sp/>(instead<sp/>of<sp/>4)<sp/>as<sp/>a<sp/>bit<sp/>of<sp/>future-proofing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__ARMEL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGNAS(byte_alignment)<sp/>__attribute__((aligned(byte_alignment)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451" refid="jsoncpp_8cpp_1a08a0024ebd1cc16ccc4a208e1e817f6e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGNAS(byte_alignment)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1ad0638ab262fec34f995ca3d8a22c9cc4" kindref="member">ALIGNAS</ref>(8)<sp/>kNull[sizeof(Value)]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="2454" refid="namespace_json_1ab30055b4bbd82aecaca57ccecd63bbe6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/><ref refid="namespace_json_1ab30055b4bbd82aecaca57ccecd63bbe6" kindref="member">kNullRef</ref><sp/>=<sp/>kNull[0];</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>Value::null<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Value&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespace_json_1ab30055b4bbd82aecaca57ccecd63bbe6" kindref="member">kNullRef</ref>);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>Value::nullRef<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int<sp/>Value::minInt<sp/>=<sp/>Int(~(UInt(-1)<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int<sp/>Value::maxInt<sp/>=<sp/>Int(UInt(-1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt<sp/>Value::maxUInt<sp/>=<sp/>UInt(-1);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int64<sp/>Value::minInt64<sp/>=<sp/>Int64(~(UInt64(-1)<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int64<sp/>Value::maxInt64<sp/>=<sp/>Int64(UInt64(-1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt64<sp/>Value::maxUInt64<sp/>=<sp/>UInt64(-1);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>constant<sp/>is<sp/>hard-coded<sp/>because<sp/>some<sp/>compiler<sp/>have<sp/>trouble</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>converting<sp/>Value::maxUInt64<sp/>to<sp/>a<sp/>double<sp/>correctly<sp/>(AIX/xlC).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assumes<sp/>that<sp/>UInt64<sp/>is<sp/>a<sp/>64<sp/>bits<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468" refid="namespace_json_1aecc0306aa526f25c5156f842182fb7fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1aecc0306aa526f25c5156f842182fb7fb" kindref="member">maxUInt64AsDouble</ref><sp/>=<sp/>18446744073709551615.0;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LargestInt<sp/>Value::minLargestInt<sp/>=<sp/>LargestInt(~(LargestUInt(-1)<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LargestInt<sp/>Value::maxLargestInt<sp/>=<sp/>LargestInt(LargestUInt(-1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LargestUInt<sp/>Value::maxLargestUInt<sp/>=<sp/>LargestUInt(-1);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="2476" refid="namespace_json_1aff0180507262a244de61b961178d7443" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>T<sp/>min,<sp/>U<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>casts<sp/>can<sp/>lose<sp/>precision,<sp/>but<sp/>we<sp/>are<sp/>looking<sp/>only<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>approximate<sp/>range.<sp/>Might<sp/>fail<sp/>on<sp/>edge<sp/>cases<sp/>though.<sp/>~cdunn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>d<sp/>&gt;=<sp/>static_cast&lt;double&gt;(min)<sp/>&amp;&amp;<sp/>d<sp/>&lt;=<sp/>static_cast&lt;double&gt;(max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d<sp/>&gt;=<sp/>min<sp/>&amp;&amp;<sp/>d<sp/>&lt;=<sp/>max;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integerToDouble(Json::UInt64<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Int64(value<sp/>/<sp/>2))<sp/>*<sp/>2.0<sp/>+<sp/>Int64(value<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integerToDouble(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>T<sp/>min,<sp/>U<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d<sp/>&gt;=<sp/>integerToDouble(min)<sp/>&amp;&amp;<sp/>d<sp/>&lt;=<sp/>integerToDouble(max);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504" refid="namespace_json_1a678ac3a60cd70ec0fb4c9abfd40eb0c4" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespace_json_1a678ac3a60cd70ec0fb4c9abfd40eb0c4" kindref="member">duplicateStringValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value,</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>an<sp/>integer<sp/>overflow<sp/>in<sp/>the<sp/>call<sp/>to<sp/>malloc<sp/>below<sp/>by<sp/>limiting<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>sane<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)Value::maxInt)</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>Value::maxInt<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>newString<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(length<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newString<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::duplicateStringValue():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>string<sp/>value<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>memcpy(newString,<sp/>value,<sp/>length);</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>newString[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newString;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Record<sp/>the<sp/>length<sp/>as<sp/>a<sp/>prefix.</highlight></codeline>
<codeline lineno="2523"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524" refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" kindref="member">duplicateAndPrefixStringValue</ref>(</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value,</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="2527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>an<sp/>integer<sp/>overflow<sp/>in<sp/>the<sp/>call<sp/>to<sp/>malloc<sp/>below<sp/>by<sp/>limiting<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>sane<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(length<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)Value::maxInt<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>-<sp/>1U,</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::duplicateAndPrefixStringValue():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;length<sp/>too<sp/>big<sp/>for<sp/>prefixing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>actualLength<sp/>=<sp/>length<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(unsigned))<sp/>+<sp/>1U;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>newString<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(actualLength));</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newString<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::duplicateAndPrefixStringValue():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>string<sp/>value<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newString)<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/>memcpy(newString<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">),<sp/>value,<sp/>length);</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>newString[actualLength<sp/>-<sp/>1U]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>buffer<sp/>over-run<sp/>accidents<sp/>by<sp/>users<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newString;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2545" refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPrefixed,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>prefixed,</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>length,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>value)</highlight></codeline>
<codeline lineno="2548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isPrefixed)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>*length<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(prefixed));</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>prefixed;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(prefixed);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>prefixed<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(unsigned);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2559" refid="namespace_json_1acf8dd162c01e37846e129556c50e4037" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1acf8dd162c01e37846e129556c50e4037" kindref="member">releaseStringValue</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{<sp/>free(value);<sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ValueInternals...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;json_valueiterator.inl&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_json" kindref="compound">Json</ref><sp/>{</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal">Exception::Exception(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/>:<sp/>msg_(msg)</highlight></codeline>
<codeline lineno="2579"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal">Exception::~Exception()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()</highlight></codeline>
<codeline lineno="2581"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>Exception::what()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()</highlight></codeline>
<codeline lineno="2583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg_.c_str();</highlight></codeline>
<codeline lineno="2585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal">RuntimeError::RuntimeError(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>:<sp/>Exception(msg)</highlight></codeline>
<codeline lineno="2588"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="2589"><highlight class="normal">LogicError::LogicError(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/>:<sp/>Exception(msg)</highlight></codeline>
<codeline lineno="2591"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="2592" refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="2593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>RuntimeError(msg);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2596" refid="namespace_json_1a27613326e9e36bbfe04a905ac90caa91" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a27613326e9e36bbfe04a905ac90caa91" kindref="member">throwLogicError</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="2597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>LogicError(msg);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>Value::CommentInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal">Value::CommentInfo::CommentInfo()<sp/>:<sp/>comment_(0)<sp/>{}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal">Value::CommentInfo::~CommentInfo()<sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment_)</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1acf8dd162c01e37846e129556c50e4037" kindref="member">releaseStringValue</ref>(comment_);</highlight></codeline>
<codeline lineno="2614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::CommentInfo::setComment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>text,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="client_8cpp_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment_)<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1acf8dd162c01e37846e129556c50e4037" kindref="member">releaseStringValue</ref>(comment_);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>comment_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/>JSON_ASSERT(text<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>||<sp/>text[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::setComment():<sp/>Comments<sp/>must<sp/>start<sp/>with<sp/>/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>seems<sp/>that<sp/>/**/<sp/>style<sp/>comments<sp/>are<sp/>acceptable<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>comment_<sp/>=<sp/><ref refid="namespace_json_1a678ac3a60cd70ec0fb4c9abfd40eb0c4" kindref="member">duplicateStringValue</ref>(text,<sp/>len);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>Value::CZString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notes:<sp/>policy_<sp/>indicates<sp/>if<sp/>the<sp/>string<sp/>was<sp/>allocated<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>string<sp/>is<sp/>stored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal">Value::CZString::CZString(ArrayIndex<sp/>aindex)<sp/>:<sp/>cstr_(0),<sp/>index_(aindex)<sp/>{}</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal">Value::CZString::CZString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ulength,<sp/>DuplicationPolicy<sp/>allocate)</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>cstr_(str)<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>!=<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/>storage_.policy_<sp/>=<sp/>allocate<sp/>&amp;<sp/>0x3;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>storage_.length_<sp/>=<sp/>ulength<sp/>&amp;<sp/>0x3FFFFFFF;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal">Value::CZString::CZString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CZString&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>cstr_(other.storage_.policy_<sp/>!=<sp/>noDuplication<sp/>&amp;&amp;<sp/>other.cstr_<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="namespace_json_1a678ac3a60cd70ec0fb4c9abfd40eb0c4" kindref="member">duplicateStringValue</ref>(other.cstr_,<sp/>other.storage_.length_)</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>other.cstr_)<sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/>storage_.policy_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other.cstr_</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DuplicationPolicy</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other.storage_.policy_)<sp/>==<sp/>noDuplication</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>noDuplication<sp/>:<sp/>duplicate)</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DuplicationPolicy</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other.storage_.policy_));</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>storage_.length_<sp/>=<sp/>other.storage_.length_;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>JSON_HAS_RVALUE_REFERENCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal">Value::CZString::CZString(CZString&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/>:<sp/>cstr_(other.cstr_),<sp/>index_(other.index_)<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>other.cstr_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal">Value::CZString::~CZString()<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cstr_<sp/>&amp;&amp;<sp/>storage_.policy_<sp/>==<sp/>duplicate)</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1acf8dd162c01e37846e129556c50e4037" kindref="member">releaseStringValue</ref>(const_cast&lt;char*&gt;(cstr_));</highlight></codeline>
<codeline lineno="2670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::CZString::swap(CZString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/>std::swap(cstr_,<sp/>other.cstr_);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/>std::swap(index_,<sp/>other.index_);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal">Value::CZString&amp;<sp/>Value::CZString::operator=(CZString<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::CZString::operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CZString&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cstr_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_<sp/>&lt;<sp/>other.index_;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>strcmp(cstr_,<sp/>other.cstr_)<sp/>&lt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>both<sp/>are<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>this_len<sp/>=<sp/>this-&gt;storage_.length_;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>other_len<sp/>=<sp/>other.storage_.length_;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>min_len<sp/>=<sp/>std::min(this_len,<sp/>other_len);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp<sp/>=<sp/>memcmp(this-&gt;cstr_,<sp/>other.cstr_,<sp/>min_len);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this_len<sp/>&lt;<sp/>other_len);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::CZString::operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CZString&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cstr_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_<sp/>==<sp/>other.index_;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>strcmp(cstr_,<sp/>other.cstr_)<sp/>==<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>both<sp/>are<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>this_len<sp/>=<sp/>this-&gt;storage_.length_;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>other_len<sp/>=<sp/>other.storage_.length_;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_len<sp/>!=<sp/>other_len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp<sp/>=<sp/>memcmp(this-&gt;cstr_,<sp/>other.cstr_,<sp/>this_len);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal">ArrayIndex<sp/>Value::CZString::index()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_;<sp/>}</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>char*<sp/>Value::CZString::c_str()<sp/>const<sp/>{<sp/>return<sp/>cstr_;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Value::CZString::data()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cstr_;<sp/>}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Value::CZString::length()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.length_;<sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::CZString::isStaticString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.policy_<sp/>==<sp/>noDuplication;<sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>Value::Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal">Value::Value(ValueType<sp/>vtype)<sp/>{</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/>initBasic(vtype);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vtype)<sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.int_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.real_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.string_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.map_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ObjectValues();</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.bool_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" kindref="member">JSON_ASSERT_UNREACHABLE</ref>;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal">Value::Value(Int<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>initBasic(intValue);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>value_.int_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal">Value::Value(UInt<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/>initBasic(uintValue);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>value_.uint_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal">Value::Value(Int64<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>initBasic(intValue);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/>value_.int_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2766"><highlight class="normal">Value::Value(UInt64<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>initBasic(uintValue);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>value_.uint_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal">Value::Value(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/>initBasic(realValue);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/>value_.real_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal">Value::Value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/>initBasic(stringValue,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/>value_.string_<sp/>=<sp/><ref refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" kindref="member">duplicateAndPrefixStringValue</ref>(value,<sp/>static_cast&lt;unsigned&gt;(strlen(value)));</highlight></codeline>
<codeline lineno="2780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal">Value::Value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>beginValue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>endValue)<sp/>{</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/>initBasic(stringValue,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/>value_.string_<sp/>=</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" kindref="member">duplicateAndPrefixStringValue</ref>(beginValue,<sp/>static_cast&lt;unsigned&gt;(endValue<sp/>-<sp/>beginValue));</highlight></codeline>
<codeline lineno="2786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal">Value::Value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/>initBasic(stringValue,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/>value_.string_<sp/>=</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" kindref="member">duplicateAndPrefixStringValue</ref>(value.data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value.length()));</highlight></codeline>
<codeline lineno="2792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal">Value::Value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StaticString&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/>initBasic(stringValue);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>value_.string_<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value.c_str());</highlight></codeline>
<codeline lineno="2797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal">Value::Value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppTL::ConstString&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>initBasic(stringValue,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>value_.string_<sp/>=<sp/><ref refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" kindref="member">duplicateAndPrefixStringValue</ref>(value,<sp/>static_cast&lt;unsigned&gt;(value.length()));</highlight></codeline>
<codeline lineno="2803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal">Value::Value(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/>initBasic(booleanValue);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>value_.bool_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="2809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal">Value::Value(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>type_(other.type_),<sp/>allocated_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comments_(0),<sp/>start_(other.start_),<sp/>limit_(other.limit_)</highlight></codeline>
<codeline lineno="2815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>other.value_;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.value_.string_<sp/>&amp;&amp;<sp/>other.allocated_)<sp/>{</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="client_8cpp_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(other.allocated_,<sp/>other.value_.string_,</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;len,<sp/>&amp;str);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_.string_<sp/>=<sp/><ref refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" kindref="member">duplicateAndPrefixStringValue</ref>(str,<sp/>len);</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocated_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_.string_<sp/>=<sp/>other.value_.string_;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocated_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.map_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ObjectValues(*other.value_.map_);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" kindref="member">JSON_ASSERT_UNREACHABLE</ref>;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.comments_)<sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>comments_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CommentInfo[numberOfCommentPlacement];</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>0;<sp/>comment<sp/>&lt;<sp/>numberOfCommentPlacement;<sp/>++comment)<sp/>{</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CommentInfo&amp;<sp/>otherComment<sp/>=<sp/>other.comments_[comment];</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(otherComment.comment_)</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comments_[comment].setComment(</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherComment.comment_,<sp/>strlen(otherComment.comment_));</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>JSON_HAS_RVALUE_REFERENCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal">Value::Value(Value&amp;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/>initBasic(nullValue);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal">Value::~Value()<sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocated_)</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1acf8dd162c01e37846e129556c50e4037" kindref="member">releaseStringValue</ref>(value_.string_);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>value_.map_;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" kindref="member">JSON_ASSERT_UNREACHABLE</ref>;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comments_)</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>comments_;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal">Value&amp;<sp/>Value::operator=(Value<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::swapPayload(Value&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/>ValueType<sp/>temp<sp/>=<sp/>type_;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/>type_<sp/>=<sp/>other.type_;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/>other.type_<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/>std::swap(value_,<sp/>other.value_);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp2<sp/>=<sp/>allocated_;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/>allocated_<sp/>=<sp/>other.allocated_;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/>other.allocated_<sp/>=<sp/>temp2<sp/>&amp;<sp/>0x1;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::swap(Value&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>swapPayload(other);</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/>std::swap(comments_,<sp/>other.comments_);</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/>std::swap(start_,<sp/>other.start_);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/>std::swap(limit_,<sp/>other.limit_);</highlight></codeline>
<codeline lineno="2907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal">ValueType<sp/>Value::type()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Value::compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;<sp/>other)</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&gt;<sp/>other)</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeDelta<sp/>=<sp/>type_<sp/>-<sp/>other.type_;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeDelta)</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typeDelta<sp/>&lt;<sp/>0<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.int_<sp/>&lt;<sp/>other.value_.int_;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.uint_<sp/>&lt;<sp/>other.value_.uint_;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.real_<sp/>&lt;<sp/>other.value_.real_;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>&lt;<sp/>other.value_.bool_;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((value_.string_<sp/>==<sp/>0)<sp/>||<sp/>(other.value_.string_<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.value_.string_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>this_len;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>other_len;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>this_str;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>other_str;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(this-&gt;allocated_,<sp/>this-&gt;value_.string_,<sp/>&amp;this_len,<sp/>&amp;this_str);</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(other.allocated_,<sp/>other.value_.string_,<sp/>&amp;other_len,<sp/>&amp;other_str);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>min_len<sp/>=<sp/>std::min(this_len,<sp/>other_len);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp<sp/>=<sp/>memcmp(this_str,<sp/>other_str,<sp/>min_len);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this_len<sp/>&lt;<sp/>other_len);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:<sp/>{</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>int(value_.map_-&gt;size()<sp/>-<sp/>other.value_.map_-&gt;size());</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta)</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delta<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*value_.map_)<sp/>&lt;<sp/>(*other.value_.map_);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" kindref="member">JSON_ASSERT_UNREACHABLE</ref>;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>unreachable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(other<sp/>&lt;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other<sp/>&lt;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(<sp/>type_<sp/>!=<sp/>other.type_<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GCC<sp/>2.95.3<sp/>says:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>attempt<sp/>to<sp/>take<sp/>address<sp/>of<sp/>bit-field<sp/>structure<sp/>member<sp/>`Json::Value::type_&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Beats<sp/>me,<sp/>but<sp/>a<sp/>temp<sp/>solves<sp/>the<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>other.type_;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>!=<sp/>temp)</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.int_<sp/>==<sp/>other.value_.int_;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.uint_<sp/>==<sp/>other.value_.uint_;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.real_<sp/>==<sp/>other.value_.real_;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>==<sp/>other.value_.bool_;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((value_.string_<sp/>==<sp/>0)<sp/>||<sp/>(other.value_.string_<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value_.string_<sp/>==<sp/>other.value_.string_);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>this_len;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>other_len;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>this_str;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>other_str;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(this-&gt;allocated_,<sp/>this-&gt;value_.string_,<sp/>&amp;this_len,<sp/>&amp;this_str);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(other.allocated_,<sp/>other.value_.string_,<sp/>&amp;other_len,<sp/>&amp;other_str);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_len<sp/>!=<sp/>other_len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp<sp/>=<sp/>memcmp(this_str,<sp/>other_str,<sp/>this_len);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.map_-&gt;size()<sp/>==<sp/>other.value_.map_-&gt;size()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*value_.map_)<sp/>==<sp/>(*other.value_.map_);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" kindref="member">JSON_ASSERT_UNREACHABLE</ref>;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>unreachable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Value::asCString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(type_<sp/>==<sp/>stringValue,</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::asCString():<sp/>requires<sp/>stringValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_.string_<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>this_len;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>this_str;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(this-&gt;allocated_,<sp/>this-&gt;value_.string_,<sp/>&amp;this_len,<sp/>&amp;this_str);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this_str;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::getString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>cend)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>!=<sp/>stringValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_.string_<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(this-&gt;allocated_,<sp/>this-&gt;value_.string_,<sp/>&amp;length,<sp/>str);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/>*cend<sp/>=<sp/>*str<sp/>+<sp/>length;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal">std::string<sp/>Value::asString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_.string_<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>this_len;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>this_str;</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(this-&gt;allocated_,<sp/>this-&gt;value_.string_,<sp/>&amp;this_len,<sp/>&amp;this_str);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(this_str,<sp/>this_len);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value_.int_);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value_.uint_);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value_.real_);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Type<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal">CppTL::ConstString<sp/>Value::asConstString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="client_8cpp_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" kindref="member">decodePrefixedString</ref>(allocated_,<sp/>value_.string_,</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;len,<sp/>&amp;str);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CppTL::ConstString(str,<sp/>len);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal">Value::Int<sp/>Value::asInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(isInt(),<sp/></highlight><highlight class="stringliteral">&quot;LargestInt<sp/>out<sp/>of<sp/>Int<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Int(value_.int_);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(isInt(),<sp/></highlight><highlight class="stringliteral">&quot;LargestUInt<sp/>out<sp/>of<sp/>Int<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Int(value_.uint_);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(value_.real_,<sp/>minInt,<sp/>maxInt),</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;double<sp/>out<sp/>of<sp/>Int<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Int(value_.real_);</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Value<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>Int.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal">Value::UInt<sp/>Value::asUInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(isUInt(),<sp/></highlight><highlight class="stringliteral">&quot;LargestInt<sp/>out<sp/>of<sp/>UInt<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UInt(value_.int_);</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(isUInt(),<sp/></highlight><highlight class="stringliteral">&quot;LargestUInt<sp/>out<sp/>of<sp/>UInt<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UInt(value_.uint_);</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(value_.real_,<sp/>0,<sp/>maxUInt),</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;double<sp/>out<sp/>of<sp/>UInt<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UInt(value_.real_);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Value<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>UInt.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal">Value::Int64<sp/>Value::asInt64()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Int64(value_.int_);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(isInt64(),<sp/></highlight><highlight class="stringliteral">&quot;LargestUInt<sp/>out<sp/>of<sp/>Int64<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Int64(value_.uint_);</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(value_.real_,<sp/>minInt64,<sp/>maxInt64),</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;double<sp/>out<sp/>of<sp/>Int64<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Int64(value_.real_);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Value<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>Int64.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal">Value::UInt64<sp/>Value::asUInt64()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(isUInt64(),<sp/></highlight><highlight class="stringliteral">&quot;LargestInt<sp/>out<sp/>of<sp/>UInt64<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UInt64(value_.int_);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UInt64(value_.uint_);</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(value_.real_,<sp/>0,<sp/>maxUInt64),</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;double<sp/>out<sp/>of<sp/>UInt64<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UInt64(value_.real_);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Value<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>UInt64.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal">LargestInt<sp/>Value::asLargestInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_NO_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asInt();</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asInt64();</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal">LargestUInt<sp/>Value::asLargestUInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_NO_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asUInt();</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asUInt64();</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value::asDouble()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.int_);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.uint_);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>integerToDouble(value_.uint_);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.real_;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>?<sp/>1.0<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Value<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>double.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Value::asFloat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.int_);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.uint_);</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>fail<sp/>(silently?)<sp/>if<sp/>the<sp/>value<sp/>is<sp/>bigger<sp/>than<sp/>MAX_FLOAT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(integerToDouble(value_.uint_));</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>!defined(JSON_USE_INT64_DOUBLE_CONVERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.real_);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_<sp/>?<sp/>1.0f<sp/>:<sp/>0.0f;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Value<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>float.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::asBool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.bool_;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.int_<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.uint_<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>kind<sp/>of<sp/>strange.<sp/>Not<sp/>recommended.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value_.real_<sp/>!=<sp/>0.0)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>JSON_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Value<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>bool.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isConvertibleTo(ValueType<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(other)<sp/>{</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(isNumeric()<sp/>&amp;&amp;<sp/>asDouble()<sp/>==<sp/>0.0)<sp/>||</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_<sp/>==<sp/>booleanValue<sp/>&amp;&amp;<sp/>value_.bool_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_<sp/>==<sp/>stringValue<sp/>&amp;&amp;<sp/>asString()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_<sp/>==<sp/>arrayValue<sp/>&amp;&amp;<sp/>value_.map_-&gt;size()<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_<sp/>==<sp/>objectValue<sp/>&amp;&amp;<sp/>value_.map_-&gt;size()<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isInt()<sp/>||</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_<sp/>==<sp/>realValue<sp/>&amp;&amp;<sp/><ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(value_.real_,<sp/>minInt,<sp/>maxInt))<sp/>||</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>booleanValue<sp/>||<sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isUInt()<sp/>||</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_<sp/>==<sp/>realValue<sp/>&amp;&amp;<sp/><ref refid="namespace_json_1aff0180507262a244de61b961178d7443" kindref="member">InRange</ref>(value_.real_,<sp/>0,<sp/>maxUInt))<sp/>||</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>booleanValue<sp/>||<sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isNumeric()<sp/>||<sp/>type_<sp/>==<sp/>booleanValue<sp/>||<sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isNumeric()<sp/>||<sp/>type_<sp/>==<sp/>booleanValue<sp/>||<sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isNumeric()<sp/>||<sp/>type_<sp/>==<sp/>booleanValue<sp/>||<sp/>type_<sp/>==<sp/>stringValue<sp/>||</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>arrayValue<sp/>||<sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>objectValue<sp/>||<sp/>type_<sp/>==<sp/>nullValue;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><ref refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" kindref="member">JSON_ASSERT_UNREACHABLE</ref>;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal">ArrayIndex<sp/>Value::size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:<sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>the<sp/>array<sp/>is<sp/>highest<sp/>index<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value_.map_-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ObjectValues::const_iterator<sp/>itLast<sp/>=<sp/>value_.map_-&gt;end();</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--itLast;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*itLast).first.index()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ArrayIndex(value_.map_-&gt;size());</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><ref refid="jsoncpp_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" kindref="member">JSON_ASSERT_UNREACHABLE</ref>;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>unreachable;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNull()<sp/>||<sp/>isArray()<sp/>||<sp/>isObject())</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size()<sp/>==<sp/>0u;</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::operator!()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isNull();<sp/>}</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::clear()<sp/>{</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>arrayValue<sp/>||</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>objectValue,</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::clear():<sp/>requires<sp/>complex<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>start_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/>limit_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.map_-&gt;clear();</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::resize(ArrayIndex<sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>arrayValue,</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::resize():<sp/>requires<sp/>arrayValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>Value(arrayValue);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/>ArrayIndex<sp/>oldSize<sp/>=<sp/>size();</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>clear();</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>&gt;<sp/>oldSize)</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[newSize<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>newSize;<sp/>index<sp/>&lt;<sp/>oldSize;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_.map_-&gt;erase(index);</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(size()<sp/>==<sp/>newSize);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal">Value&amp;<sp/>Value::operator[](ArrayIndex<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>arrayValue,</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::operator[](ArrayIndex):<sp/>requires<sp/>arrayValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>Value(arrayValue);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>CZString<sp/>key(index);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/>ObjectValues::iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;lower_bound(key);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>value_.map_-&gt;end()<sp/>&amp;&amp;<sp/>(*it).first<sp/>==<sp/>key)</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/>ObjectValues::value_type<sp/>defaultValue(key,<sp/>nullRef);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>value_.map_-&gt;insert(it,<sp/>defaultValue);</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal">Value&amp;<sp/>Value::operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::operator[](int<sp/>index):<sp/>index<sp/>cannot<sp/>be<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[ArrayIndex(index)];</highlight></codeline>
<codeline lineno="3361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>Value::operator[](ArrayIndex<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>arrayValue,</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::operator[](ArrayIndex)const:<sp/>requires<sp/>arrayValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullRef;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/>CZString<sp/>key(index);</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/>ObjectValues::const_iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;find(key);</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>value_.map_-&gt;end())</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullRef;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>Value::operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::operator[](int<sp/>index)<sp/>const:<sp/>index<sp/>cannot<sp/>be<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[ArrayIndex(index)];</highlight></codeline>
<codeline lineno="3381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::initBasic(ValueType<sp/>vtype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allocated)<sp/>{</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/>type_<sp/>=<sp/>vtype;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/>allocated_<sp/>=<sp/>allocated;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/>comments_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/>start_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/>limit_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Access<sp/>an<sp/>object<sp/>value<sp/>by<sp/>name,<sp/>create<sp/>a<sp/>null<sp/>member<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@pre<sp/>Type<sp/>of<sp/>&apos;*this&apos;<sp/>is<sp/>object<sp/>or<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>key<sp/>is<sp/>null-terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal">Value&amp;<sp/>Value::resolveReference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>objectValue,</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::resolveReference():<sp/>requires<sp/>objectValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>Value(objectValue);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/>CZString<sp/>actualKey(</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key,<sp/>static_cast&lt;unsigned&gt;(strlen(key)),<sp/>CZString::noDuplication);<sp/></highlight><highlight class="comment">//<sp/>NOTE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/>ObjectValues::iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;lower_bound(actualKey);</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>value_.map_-&gt;end()<sp/>&amp;&amp;<sp/>(*it).first<sp/>==<sp/>actualKey)</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>ObjectValues::value_type<sp/>defaultValue(actualKey,<sp/>nullRef);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>value_.map_-&gt;insert(it,<sp/>defaultValue);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/>Value&amp;<sp/>value<sp/>=<sp/>(*it).second;</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>key<sp/>is<sp/>not<sp/>null-terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal">Value&amp;<sp/>Value::resolveReference(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>cend)</highlight></codeline>
<codeline lineno="3414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>objectValue,</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::resolveReference(key,<sp/>end):<sp/>requires<sp/>objectValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>Value(objectValue);</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/>CZString<sp/>actualKey(</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key,<sp/>static_cast&lt;unsigned&gt;(cend-key),<sp/>CZString::duplicateOnCopy);</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/>ObjectValues::iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;lower_bound(actualKey);</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>value_.map_-&gt;end()<sp/>&amp;&amp;<sp/>(*it).first<sp/>==<sp/>actualKey)</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/>ObjectValues::value_type<sp/>defaultValue(actualKey,<sp/>nullRef);</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>value_.map_-&gt;insert(it,<sp/>defaultValue);</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/>Value&amp;<sp/>value<sp/>=<sp/>(*it).second;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal">Value<sp/>Value::get(ArrayIndex<sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>defaultValue)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>value<sp/>=<sp/>&amp;((*this)[index]);</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>==<sp/>&amp;nullRef<sp/>?<sp/>defaultValue<sp/>:<sp/>*value;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isValidIndex(ArrayIndex<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>size();<sp/>}</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal">Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>Value::find(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>cend)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3440"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>objectValue,</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::find(key,<sp/>end,<sp/>found):<sp/>requires<sp/>objectValue<sp/>or<sp/>nullValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>CZString<sp/>actualKey(key,<sp/>static_cast&lt;unsigned&gt;(cend-key),<sp/>CZString::noDuplication);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/>ObjectValues::const_iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;find(actualKey);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>value_.map_-&gt;end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(*it).second;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>Value::operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3451"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>found<sp/>=<sp/>find(key,<sp/>key<sp/>+<sp/>strlen(key));</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullRef;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*found;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3456"><highlight class="normal">Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Value::operator[](std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3457"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>found<sp/>=<sp/>find(key.data(),<sp/>key.data()<sp/>+<sp/>key.length());</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullRef;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*found;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal">Value&amp;<sp/>Value::operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resolveReference(key,<sp/>key<sp/>+<sp/>strlen(key));</highlight></codeline>
<codeline lineno="3465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal">Value&amp;<sp/>Value::operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resolveReference(key.data(),<sp/>key.data()<sp/>+<sp/>key.length());</highlight></codeline>
<codeline lineno="3469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal">Value&amp;<sp/>Value::operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StaticString&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resolveReference(key.c_str());</highlight></codeline>
<codeline lineno="3473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal">Value&amp;<sp/>Value::operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppTL::ConstString&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resolveReference(key.c_str(),<sp/>key.end_c_str());</highlight></codeline>
<codeline lineno="3478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal">Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Value::operator[](CppTL::ConstString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3480"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>found<sp/>=<sp/>find(key.c_str(),<sp/>key.end_c_str());</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullRef;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*found;</highlight></codeline>
<codeline lineno="3484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal">Value&amp;<sp/>Value::append(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[size()]<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal">Value<sp/>Value::get(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>cend,<sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>defaultValue)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3490"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>found<sp/>=<sp/>find(key,<sp/>cend);</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!found<sp/>?<sp/>defaultValue<sp/>:<sp/>*found;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3494"><highlight class="normal">Value<sp/>Value::get(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>key,<sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>defaultValue)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3495"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(key,<sp/>key<sp/>+<sp/>strlen(key),<sp/>defaultValue);</highlight></codeline>
<codeline lineno="3497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal">Value<sp/>Value::get(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key,<sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>defaultValue)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3499"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(key.data(),<sp/>key.data()<sp/>+<sp/>key.length(),<sp/>defaultValue);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::removeMember(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cend,<sp/>Value*<sp/>removed)</highlight></codeline>
<codeline lineno="3505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>!=<sp/>objectValue)<sp/>{</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/>CZString<sp/>actualKey(key,<sp/>static_cast&lt;unsigned&gt;(cend-key),<sp/>CZString::noDuplication);</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/>ObjectValues::iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;find(actualKey);</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>value_.map_-&gt;end())</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/>*removed<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>value_.map_-&gt;erase(it);</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::removeMember(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/>Value*<sp/>removed)</highlight></codeline>
<codeline lineno="3518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removeMember(key,<sp/>key<sp/>+<sp/>strlen(key),<sp/>removed);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::removeMember(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key,<sp/>Value*<sp/>removed)</highlight></codeline>
<codeline lineno="3522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removeMember(key.data(),<sp/>key.data()<sp/>+<sp/>key.length(),<sp/>removed);</highlight></codeline>
<codeline lineno="3524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal">Value<sp/>Value::removeMember(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="3526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>objectValue,</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::removeMember():<sp/>requires<sp/>objectValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullRef;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>Value<sp/>removed;<sp/><sp/></highlight><highlight class="comment">//<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/>removeMember(key,<sp/>key<sp/>+<sp/>strlen(key),<sp/>&amp;removed);</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removed;<sp/></highlight><highlight class="comment">//<sp/>still<sp/>null<sp/>if<sp/>removeMember()<sp/>did<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3536"><highlight class="normal">Value<sp/>Value::removeMember(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight></codeline>
<codeline lineno="3537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removeMember(key.c_str());</highlight></codeline>
<codeline lineno="3539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::removeIndex(ArrayIndex<sp/>index,<sp/>Value*<sp/>removed)<sp/>{</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>!=<sp/>arrayValue)<sp/>{</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>CZString<sp/>key(index);</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/>ObjectValues::iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;find(key);</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>value_.map_-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>*removed<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/>ArrayIndex<sp/>oldSize<sp/>=<sp/>size();</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shift<sp/>left<sp/>all<sp/>items<sp/>left,<sp/>into<sp/>the<sp/>place<sp/>of<sp/>the<sp/>&quot;removed&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>i<sp/>=<sp/>index;<sp/>i<sp/>&lt;<sp/>(oldSize<sp/>-<sp/>1);<sp/>++i){</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/>CZString<sp/>keey(i);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>(*value_.map_)[keey]<sp/>=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>erase<sp/>the<sp/>last<sp/>one<sp/>(&quot;leftover&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/>CZString<sp/>keyLast(oldSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/>ObjectValues::iterator<sp/>itLast<sp/>=<sp/>value_.map_-&gt;find(keyLast);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/>value_.map_-&gt;erase(itLast);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal">Value<sp/>Value::get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppTL::ConstString&amp;<sp/>key,</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>defaultValue)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(key.c_str(),<sp/>key.end_c_str(),<sp/>defaultValue);</highlight></codeline>
<codeline lineno="3568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isMember(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>cend)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3572"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>value<sp/>=<sp/>find(key,<sp/>cend);</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL<sp/>!=<sp/>value;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isMember(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3577"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isMember(key,<sp/>key<sp/>+<sp/>strlen(key));</highlight></codeline>
<codeline lineno="3579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isMember(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3581"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isMember(key.data(),<sp/>key.data()<sp/>+<sp/>key.length());</highlight></codeline>
<codeline lineno="3583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isMember(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppTL::ConstString&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isMember(key.c_str(),<sp/>key.end_c_str());</highlight></codeline>
<codeline lineno="3588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal">Value::Members<sp/>Value::getMemberNames()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/>JSON_ASSERT_MESSAGE(</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_<sp/>==<sp/>nullValue<sp/>||<sp/>type_<sp/>==<sp/>objectValue,</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>Json::Value::getMemberNames(),<sp/>value<sp/>must<sp/>be<sp/>objectValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>==<sp/>nullValue)</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value::Members();</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/>Members<sp/>members;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/>members.reserve(value_.map_-&gt;size());</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/>ObjectValues::const_iterator<sp/>it<sp/>=<sp/>value_.map_-&gt;begin();</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/>ObjectValues::const_iterator<sp/>itEnd<sp/>=<sp/>value_.map_-&gt;end();</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>itEnd;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>members.push_back(std::string((*it).first.data(),</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it).first.length()));</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>members;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>ifdef<sp/>JSON_USE_CPPTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EnumMemberNames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Value::enumMemberNames()<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(<sp/>type_<sp/>==<sp/>objectValue<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>CppTL::Enum::any(<sp/><sp/>CppTL::Enum::transform(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CppTL::Enum::keys(<sp/>*(value_.map_),<sp/>CppTL::Type&lt;const<sp/>CZString<sp/>&amp;&gt;()<sp/>),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberNamesTransform()<sp/>)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3618"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>EnumMemberNames();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EnumValues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Value::enumValues()<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(<sp/>type_<sp/>==<sp/>objectValue<sp/><sp/>||<sp/><sp/>type_<sp/>==<sp/>arrayValue<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>CppTL::Enum::anyValues(<sp/>*(value_.map_),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CppTL::Type&lt;const<sp/>Value<sp/>&amp;&gt;()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>EnumValues();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633" refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" kindref="member">IsIntegral</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral_part;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modf(d,<sp/>&amp;integral_part)<sp/>==<sp/>0.0;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isNull()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>nullValue;<sp/>}</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isBool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>booleanValue;<sp/>}</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.int_<sp/>&gt;=<sp/>minInt<sp/>&amp;&amp;<sp/>value_.int_<sp/>&lt;=<sp/>maxInt;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.uint_<sp/>&lt;=<sp/>UInt(maxInt);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.real_<sp/>&gt;=<sp/>minInt<sp/>&amp;&amp;<sp/>value_.real_<sp/>&lt;=<sp/>maxInt<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" kindref="member">IsIntegral</ref>(value_.real_);</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isUInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.int_<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>LargestUInt(value_.int_)<sp/>&lt;=<sp/>LargestUInt(maxUInt);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.uint_<sp/>&lt;=<sp/>maxUInt;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.real_<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>value_.real_<sp/>&lt;=<sp/>maxUInt<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" kindref="member">IsIntegral</ref>(value_.real_);</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isInt64()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.uint_<sp/>&lt;=<sp/>UInt64(maxInt64);</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>maxInt64<sp/>(=<sp/>2^63<sp/>-<sp/>1)<sp/>is<sp/>not<sp/>exactly<sp/>representable<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double,<sp/>so<sp/>double(maxInt64)<sp/>will<sp/>be<sp/>rounded<sp/>up<sp/>to<sp/>2^63.<sp/>Therefore<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>require<sp/>the<sp/>value<sp/>to<sp/>be<sp/>strictly<sp/>less<sp/>than<sp/>the<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.real_<sp/>&gt;=<sp/>double(minInt64)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_.real_<sp/>&lt;<sp/>double(maxInt64)<sp/>&amp;&amp;<sp/><ref refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" kindref="member">IsIntegral</ref>(value_.real_);</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>JSON_HAS_INT64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isUInt64()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.int_<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>maxUInt64<sp/>(=<sp/>2^64<sp/>-<sp/>1)<sp/>is<sp/>not<sp/>exactly<sp/>representable<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double,<sp/>so<sp/>double(maxUInt64)<sp/>will<sp/>be<sp/>rounded<sp/>up<sp/>to<sp/>2^64.<sp/>Therefore<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>require<sp/>the<sp/>value<sp/>to<sp/>be<sp/>strictly<sp/>less<sp/>than<sp/>the<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.real_<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>value_.real_<sp/>&lt;<sp/>maxUInt64AsDouble<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" kindref="member">IsIntegral</ref>(value_.real_);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>JSON_HAS_INT64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isIntegral()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isInt64()<sp/>||<sp/>isUInt64();</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isInt()<sp/>||<sp/>isUInt();</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isDouble()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>realValue<sp/>||<sp/>isIntegral();<sp/>}</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isNumeric()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isIntegral()<sp/>||<sp/>isDouble();<sp/>}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>stringValue;<sp/>}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isArray()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>arrayValue;<sp/>}</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::isObject()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>objectValue;<sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::setComment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>CommentPlacement<sp/>placement)<sp/>{</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!comments_)</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/>comments_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CommentInfo[numberOfCommentPlacement];</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(comment[len-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>discard<sp/>trailing<sp/>newline,<sp/>to<sp/>aid<sp/>indentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/>comments_[placement].setComment(comment,<sp/>len);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::setComment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment,<sp/>CommentPlacement<sp/>placement)<sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/>setComment(comment,<sp/>strlen(comment),<sp/>placement);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::setComment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>comment,<sp/>CommentPlacement<sp/>placement)<sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/>setComment(comment.c_str(),<sp/>comment.length(),<sp/>placement);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Value::hasComment(CommentPlacement<sp/>placement)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comments_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>comments_[placement].comment_<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal">std::string<sp/>Value::getComment(CommentPlacement<sp/>placement)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasComment(placement))</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comments_[placement].comment_;</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::setOffsetStart(ptrdiff_t<sp/>start)<sp/>{<sp/>start_<sp/>=<sp/>start;<sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Value::setOffsetLimit(ptrdiff_t<sp/>limit)<sp/>{<sp/>limit_<sp/>=<sp/>limit;<sp/>}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal">ptrdiff_t<sp/>Value::getOffsetStart()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start_;<sp/>}</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal">ptrdiff_t<sp/>Value::getOffsetLimit()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>limit_;<sp/>}</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal">std::string<sp/>Value::toStyledString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/>StyledWriter<sp/>writer;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writer.write(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal">Value::const_iterator<sp/>Value::begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_.map_)</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(value_.map_-&gt;begin());</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator();</highlight></codeline>
<codeline lineno="3782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal">Value::const_iterator<sp/>Value::end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_.map_)</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(value_.map_-&gt;end());</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator();</highlight></codeline>
<codeline lineno="3795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal">Value::iterator<sp/>Value::begin()<sp/>{</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_.map_)</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(value_.map_-&gt;begin());</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator();</highlight></codeline>
<codeline lineno="3808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal">Value::iterator<sp/>Value::end()<sp/>{</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_)<sp/>{</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_.map_)</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(value_.map_-&gt;end());</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator();</highlight></codeline>
<codeline lineno="3821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>PathArgument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal">PathArgument::PathArgument()<sp/>:<sp/>key_(),<sp/>index_(),<sp/>kind_(kindNone)<sp/>{}</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal">PathArgument::PathArgument(ArrayIndex<sp/>index)</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>key_(),<sp/>index_(index),<sp/>kind_(kindIndex)<sp/>{}</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal">PathArgument::PathArgument(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>key_(key),<sp/>index_(),<sp/>kind_(kindKey)<sp/>{}</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal">PathArgument::PathArgument(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>key_(key.c_str()),<sp/>index_(),<sp/>kind_(kindKey)<sp/>{}</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal">Path::Path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>a1,</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>a2,</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>a3,</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>a4,</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>a5)<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/>InArgs<sp/>in;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>in.push_back(&amp;a1);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/>in.push_back(&amp;a2);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/>in.push_back(&amp;a3);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/>in.push_back(&amp;a4);</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/>in.push_back(&amp;a5);</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/>makePath(path,<sp/>in);</highlight></codeline>
<codeline lineno="3853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Path::makePath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InArgs&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>current<sp/>=<sp/>path.c_str();</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>current<sp/>+<sp/>path.length();</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/>InArgs::const_iterator<sp/>itInArg<sp/>=<sp/>in.begin();</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPathInArg(path,<sp/>in,<sp/>itInArg,<sp/>PathArgument::kindIndex);</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayIndex<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>current<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*current<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*current<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">;<sp/>++current)</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>index<sp/>*<sp/>10<sp/>+<sp/>ArrayIndex(*current<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_.push_back(index);</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>end<sp/>||<sp/>*current++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidPath(path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(current<sp/>-<sp/>path.c_str()));</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPathInArg(path,<sp/>in,<sp/>itInArg,<sp/>PathArgument::kindKey);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*current<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>beginName<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>!strchr(</highlight><highlight class="stringliteral">&quot;[.&quot;</highlight><highlight class="normal">,<sp/>*current))</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++current;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args_.push_back(std::string(beginName,<sp/>current));</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Path::addPathInArg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*path*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InArgs&amp;<sp/>in,</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InArgs::const_iterator&amp;<sp/>itInArg,</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PathArgument::Kind<sp/>kind)<sp/>{</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itInArg<sp/>==<sp/>in.end())<sp/>{</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>missing<sp/>argument<sp/>%d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*itInArg)-&gt;kind_<sp/>!=<sp/>kind)<sp/>{</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>bad<sp/>argument<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>args_.push_back(**itInArg);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Path::invalidPath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*path*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*location*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>invalid<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>Path::resolve(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>node<sp/>=<sp/>&amp;root;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Args::const_iterator<sp/>it<sp/>=<sp/>args_.begin();<sp/>it<sp/>!=<sp/>args_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>arg<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.kind_<sp/>==<sp/>PathArgument::kindIndex)<sp/>{</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;isArray()<sp/>||<sp/>!node-&gt;isValidIndex(arg.index_))<sp/>{</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>unable<sp/>to<sp/>resolve<sp/>path<sp/>(array<sp/>value<sp/>expected<sp/>at<sp/>position...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>&amp;((*node)[arg.index_]);</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.kind_<sp/>==<sp/>PathArgument::kindKey)<sp/>{</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;isObject())<sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>unable<sp/>to<sp/>resolve<sp/>path<sp/>(object<sp/>value<sp/>expected<sp/>at<sp/>position...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>&amp;((*node)[arg.key_]);</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>&amp;Value::nullRef)<sp/>{</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>unable<sp/>to<sp/>resolve<sp/>path<sp/>(object<sp/>has<sp/>no<sp/>member<sp/>named<sp/>&apos;&apos;<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*node;</highlight></codeline>
<codeline lineno="3924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal">Value<sp/>Path::resolve(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>defaultValue)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value*<sp/>node<sp/>=<sp/>&amp;root;</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Args::const_iterator<sp/>it<sp/>=<sp/>args_.begin();<sp/>it<sp/>!=<sp/>args_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>arg<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.kind_<sp/>==<sp/>PathArgument::kindIndex)<sp/>{</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;isArray()<sp/>||<sp/>!node-&gt;isValidIndex(arg.index_))</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>&amp;((*node)[arg.index_]);</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.kind_<sp/>==<sp/>PathArgument::kindKey)<sp/>{</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;isObject())</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>&amp;((*node)[arg.key_]);</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>&amp;Value::nullRef)</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*node;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal">Value&amp;<sp/>Path::make(Value&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/>Value*<sp/>node<sp/>=<sp/>&amp;root;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Args::const_iterator<sp/>it<sp/>=<sp/>args_.begin();<sp/>it<sp/>!=<sp/>args_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PathArgument&amp;<sp/>arg<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.kind_<sp/>==<sp/>PathArgument::kindIndex)<sp/>{</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>node<sp/>is<sp/>not<sp/>an<sp/>array<sp/>at<sp/>position<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>&amp;((*node)[arg.index_]);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.kind_<sp/>==<sp/>PathArgument::kindKey)<sp/>{</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;isObject())<sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>node<sp/>is<sp/>not<sp/>an<sp/>object<sp/>at<sp/>position...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>&amp;((*node)[arg.key_]);</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*node;</highlight></codeline>
<codeline lineno="3962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_value.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Beginning<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_writer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2011<sp/>Baptiste<sp/>Lepilleur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>MIT<sp/>license,<sp/>or<sp/>public<sp/>domain<sp/>if<sp/>desired<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized<sp/>in<sp/>your<sp/>jurisdiction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>LICENSE<sp/>for<sp/>detail<sp/>or<sp/>copy<sp/>at<sp/>http://jsoncpp.sourceforge.net/LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/writer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;json_tool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>if<sp/>!defined(JSON_IS_AMALGAMATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1200<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;<sp/>1800<sp/>//<sp/>Between<sp/>VC++<sp/>6.0<sp/>and<sp/>VC++<sp/>11.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite<sp/>_finite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__sun)<sp/>&amp;&amp;<sp/>defined(__SVR4)<sp/>//Solaris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(isfinite)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ieeefp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite<sp/>finite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_AIX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(isfinite)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite<sp/>finite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__hpux)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(isfinite)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__ia64)<sp/>&amp;&amp;<sp/>!defined(finite)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite(x)<sp/>((sizeof(x)<sp/>==<sp/>sizeof(float)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="4014"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Isfinitef(x)<sp/>:<sp/>_IsFinite(x)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite<sp/>finite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(__QNXNTO__))<sp/>//<sp/>QNX<sp/>already<sp/>defines<sp/>isfinite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023" refid="jsoncpp_8cpp_1aab49fbe39624f083e45ef2d85e7e0705" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite<sp/>std::isfinite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(WINCE)<sp/>&amp;&amp;<sp/>defined(__STDC_SECURE_LIB__)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1500<sp/>//<sp/>VC++<sp/>9.0<sp/>and<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>sprintf_s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_MSC_VER<sp/>&gt;=<sp/>1900<sp/>//<sp/>VC++<sp/>14.0<sp/>and<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>std::snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ANDROID__)<sp/>||<sp/>defined(__QNXNTO__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__MINGW32__)<sp/>&amp;&amp;<sp/>!defined(__CYGWIN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>std::snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__BORLANDC__)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isfinite<sp/>_finite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400<sp/>//<sp/>VC++<sp/>8.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>warning<sp/>about<sp/>strdup<sp/>being<sp/>deprecated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4996)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_json" kindref="compound">Json</ref><sp/>{</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201103L<sp/>||<sp/>(defined(_CPPLIB_VER)<sp/>&amp;&amp;<sp/>_CPPLIB_VER<sp/>&gt;=<sp/>520)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;StreamWriter&gt;<sp/><ref refid="namespace_json_1a7132404aeebfc96d7c6ad2c66260afb5" kindref="member">StreamWriterPtr</ref>;</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4059" refid="namespace_json_1a7132404aeebfc96d7c6ad2c66260afb5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::auto_ptr&lt;StreamWriter&gt;<sp/><sp/><sp/><ref refid="namespace_json_1a7132404aeebfc96d7c6ad2c66260afb5" kindref="member">StreamWriterPtr</ref>;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062" refid="namespace_json_1aa11b210ff98a4f4dd4e2df19260f8c3a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1aa11b210ff98a4f4dd4e2df19260f8c3a" kindref="member">containsControlCharacter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_json_1a0381e631737f51331065a388f4f59197" kindref="member">isControlCharacter</ref>(*(str++)))</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight></codeline>
<codeline lineno="4070" refid="namespace_json_1ae8a357381f264cf28f46449e79ab1dea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1ae8a357381f264cf28f46449e79ab1dea" kindref="member">containsControlCharacter0</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="client_8cpp_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>str<sp/>+<sp/><ref refid="client_8cpp_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_json_1a0381e631737f51331065a388f4f59197" kindref="member">isControlCharacter</ref>(*str)<sp/>||<sp/>0==*str)</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight></codeline>
<codeline lineno="4080" refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(LargestInt<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1a602bcf69c2042fb61c3b243cb16f04ca" kindref="member">UIntToStringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>current<sp/>=<sp/>buffer<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer);</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>Value::minLargestInt)<sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1ac1ffd21a9e55122014353c773ccc496e" kindref="member">uintToString</ref>(LargestUInt(Value::maxLargestInt)<sp/>+<sp/>1,<sp/>current);</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/>*--current<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1ac1ffd21a9e55122014353c773ccc496e" kindref="member">uintToString</ref>(LargestUInt(-value),<sp/>current);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>*--current<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1ac1ffd21a9e55122014353c773ccc496e" kindref="member">uintToString</ref>(LargestUInt(value),<sp/>current);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/>assert(current<sp/>&gt;=<sp/>buffer);</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096" refid="namespace_json_1a3f46b0bc62b95a9426a2da0117bdf9f0" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(LargestUInt<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1a602bcf69c2042fb61c3b243cb16f04ca" kindref="member">UIntToStringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>current<sp/>=<sp/>buffer<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer);</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1ac1ffd21a9e55122014353c773ccc496e" kindref="member">uintToString</ref>(value,<sp/>current);</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/>assert(current<sp/>&gt;=<sp/>buffer);</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight></codeline>
<codeline lineno="4106" refid="namespace_json_1a5d3eba6789f9a9c1ab563ff8b4a5090f" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(Int<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(LargestInt(value));</highlight></codeline>
<codeline lineno="4108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight></codeline>
<codeline lineno="4110" refid="namespace_json_1a4d43b0ff222bd3975bcf1babca0b978f" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(UInt<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(LargestUInt(value));</highlight></codeline>
<codeline lineno="4112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>#<sp/>if<sp/>defined(JSON_HAS_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116" refid="namespace_json_1a1c49ced79060a67638d7fa78a63b1813" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useSpecialFloats,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision)<sp/>{</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>buffer<sp/>that<sp/>is<sp/>more<sp/>than<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>the<sp/>16<sp/>digits<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>precision<sp/>requested<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[32];</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="client_8cpp_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>formatString[6];</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/>sprintf(formatString,<sp/></highlight><highlight class="stringliteral">&quot;%%.%dg&quot;</highlight><highlight class="normal">,<sp/>precision);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>into<sp/>the<sp/>buffer.<sp/>We<sp/>need<sp/>not<sp/>request<sp/>the<sp/>alternative<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>always<sp/>has<sp/>a<sp/>decimal<sp/>point<sp/>because<sp/>JSON<sp/>doesn&apos;t<sp/>distingish<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>concepts<sp/>of<sp/>reals<sp/>and<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="jsoncpp_8cpp_1aab49fbe39624f083e45ef2d85e7e0705" kindref="member">isfinite</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>formatString,<sp/>value);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IEEE<sp/>standard<sp/>states<sp/>that<sp/>NaN<sp/>values<sp/>will<sp/>not<sp/>compare<sp/>to<sp/>themselves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>useSpecialFloats<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>useSpecialFloats<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;-Infinity&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;-1e+9999&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>useSpecialFloats<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Infinity&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;1e+9999&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>those,<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>call<sp/>fixNumLoc,<sp/>but<sp/>it<sp/>is<sp/>fast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/>assert(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1aa208904144dc7b11ccc28f47c9afab9a" kindref="member">fixNumericLocale</ref>(buffer,<sp/>buffer<sp/>+<sp/>len);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="4144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight></codeline>
<codeline lineno="4146" refid="namespace_json_1a99995d7dafa4f4970b349d7d3c8d1d99" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>17);<sp/>}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight></codeline>
<codeline lineno="4148" refid="namespace_json_1a979ed531f091985e22f0051cd2a8e341" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150" refid="namespace_json_1aa0c8235a4a5c6599da5d3332743db8ac" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1aa0c8235a4a5c6599da5d3332743db8ac" kindref="member">valueToQuotedString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>sure<sp/>how<sp/>to<sp/>handle<sp/>unicode...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strpbrk(value,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\\b\f\n\r\t&quot;</highlight><highlight class="normal">)<sp/>==<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="namespace_json_1aa11b210ff98a4f4dd4e2df19260f8c3a" kindref="member">containsControlCharacter</ref>(value))</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>value<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>walk<sp/>value<sp/>and<sp/>escape<sp/>any<sp/>special<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appending<sp/>to<sp/>std::string<sp/>is<sp/>not<sp/>efficient,<sp/>but<sp/>this<sp/>should<sp/>be<sp/>rare.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(Note:<sp/>forward<sp/>slashes<sp/>are<sp/>*not*<sp/>rare,<sp/>but<sp/>I<sp/>am<sp/>not<sp/>escaping<sp/>them.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/>std::string::size_type<sp/>maxsize<sp/>=</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strlen(value)<sp/>*<sp/>2<sp/>+<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>allescaped+quotes+NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>result.reserve(maxsize);<sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>lots<sp/>of<sp/>mallocs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c<sp/>=<sp/>value;<sp/>*c<sp/>!=<sp/>0;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*c)<sp/>{</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\f&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>&apos;/&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>though<sp/>\/<sp/>is<sp/>considered<sp/>a<sp/>legal<sp/>escape<sp/>in<sp/>JSON,<sp/>a<sp/>bare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slash<sp/>is<sp/>also<sp/>legal,<sp/>so<sp/>I<sp/>see<sp/>no<sp/>reason<sp/>to<sp/>escape<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(I<sp/>hope<sp/>I<sp/>am<sp/>not<sp/>misunderstanding<sp/>something.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blep<sp/>notes:<sp/>actually<sp/>escaping<sp/>\/<sp/>may<sp/>be<sp/>useful<sp/>in<sp/>javascript<sp/>to<sp/>avoid<sp/>&lt;/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>add<sp/>a<sp/>flag<sp/>to<sp/>allow<sp/>this<sp/>compatibility<sp/>mode<sp/>and<sp/>prevent<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sequence<sp/>from<sp/>occurring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_json_1a0381e631737f51331065a388f4f59197" kindref="member">isControlCharacter</ref>(*c))<sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\u&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::uppercase<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*c);</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>oss.str();</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*c;</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/upcaste/upcaste/blob/master/src/upcore/src/cstring/strnpbrk.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213" refid="namespace_json_1a7492156d0c7d2dd2f672acacfb240320" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><ref refid="namespace_json_1a7492156d0c7d2dd2f672acacfb240320" kindref="member">strnpbrk</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>accept,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>assert((s<sp/>||<sp/>!n)<sp/>&amp;&amp;<sp/>accept);</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>s<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>cur<sp/>=<sp/>s;<sp/>cur<sp/>&lt;<sp/>end;<sp/>++cur)<sp/>{</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*cur;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>a<sp/>=<sp/>accept;<sp/>*a;<sp/>++a)<sp/>{</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*a<sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cur;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4227" refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" kindref="member">valueToQuotedStringN</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>sure<sp/>how<sp/>to<sp/>handle<sp/>unicode...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_json_1a7492156d0c7d2dd2f672acacfb240320" kindref="member">strnpbrk</ref>(value,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\\b\f\n\r\t&quot;</highlight><highlight class="normal">,<sp/>length)<sp/>==<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="namespace_json_1ae8a357381f264cf28f46449e79ab1dea" kindref="member">containsControlCharacter0</ref>(value,<sp/>length))</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>value<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>walk<sp/>value<sp/>and<sp/>escape<sp/>any<sp/>special<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appending<sp/>to<sp/>std::string<sp/>is<sp/>not<sp/>efficient,<sp/>but<sp/>this<sp/>should<sp/>be<sp/>rare.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(Note:<sp/>forward<sp/>slashes<sp/>are<sp/>*not*<sp/>rare,<sp/>but<sp/>I<sp/>am<sp/>not<sp/>escaping<sp/>them.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/>std::string::size_type<sp/>maxsize<sp/>=</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>*<sp/>2<sp/>+<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>allescaped+quotes+NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/>result.reserve(maxsize);<sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>lots<sp/>of<sp/>mallocs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>value<sp/>+<sp/>length;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c<sp/>=<sp/>value;<sp/>c<sp/>!=<sp/>end;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*c)<sp/>{</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\f&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>&apos;/&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>though<sp/>\/<sp/>is<sp/>considered<sp/>a<sp/>legal<sp/>escape<sp/>in<sp/>JSON,<sp/>a<sp/>bare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slash<sp/>is<sp/>also<sp/>legal,<sp/>so<sp/>I<sp/>see<sp/>no<sp/>reason<sp/>to<sp/>escape<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(I<sp/>hope<sp/>I<sp/>am<sp/>not<sp/>misunderstanding<sp/>something.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blep<sp/>notes:<sp/>actually<sp/>escaping<sp/>\/<sp/>may<sp/>be<sp/>useful<sp/>in<sp/>javascript<sp/>to<sp/>avoid<sp/>&lt;/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>add<sp/>a<sp/>flag<sp/>to<sp/>allow<sp/>this<sp/>compatibility<sp/>mode<sp/>and<sp/>prevent<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sequence<sp/>from<sp/>occurring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="namespace_json_1a0381e631737f51331065a388f4f59197" kindref="member">isControlCharacter</ref>(*c))<sp/>||<sp/>(*c<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\u&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::uppercase<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*c);</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>oss.str();</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*c;</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>Writer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4292"><highlight class="normal">Writer::~Writer()<sp/>{}</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>FastWriter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal">FastWriter::FastWriter()</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>yamlCompatiblityEnabled_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>dropNullPlaceholders_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>omitEndingLineFeed_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FastWriter::enableYAMLCompatibility()<sp/>{<sp/>yamlCompatiblityEnabled_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FastWriter::dropNullPlaceholders()<sp/>{<sp/>dropNullPlaceholders_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FastWriter::omitEndingLineFeed()<sp/>{<sp/>omitEndingLineFeed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal">std::string<sp/>FastWriter::write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/>writeValue(root);</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!omitEndingLineFeed_)</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref>;</highlight></codeline>
<codeline lineno="4313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FastWriter::writeValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value.type())<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dropNullPlaceholders_)</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestInt());</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestUInt());</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asDouble());</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>NULL<sp/>possible<sp/>for<sp/>value.string_?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end;</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>value.getString(&amp;str,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/><ref refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" kindref="member">valueToQuotedStringN</ref>(str,<sp/>static_cast&lt;unsigned&gt;(end-str));</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/><ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asBool());</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayIndex<sp/>size<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(value[index]);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:<sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/>Value::Members<sp/>members(value.getMemberNames());</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Value::Members::iterator<sp/>it<sp/>=<sp/>members.begin();<sp/>it<sp/>!=<sp/>members.end();</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>members.begin())</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document_<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>document_<sp/>+=<sp/><ref refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" kindref="member">valueToQuotedStringN</ref>(name.data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(name.length()));</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>document_<sp/>+=<sp/>yamlCompatiblityEnabled_<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(value[name]);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/>document_<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>StyledWriter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal">StyledWriter::StyledWriter()</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>rightMargin_(74),<sp/>indentSize_(3),<sp/>addChildValues_()<sp/>{}</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal">std::string<sp/>StyledWriter::write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>addChildValues_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>indentString_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>writeCommentBeforeValue(root);</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/>writeValue(root);</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/>writeCommentAfterValueOnSameLine(root);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref>;</highlight></codeline>
<codeline lineno="4384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::writeValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value.type())<sp/>{</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestInt()));</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestUInt()));</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asDouble()));</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>NULL<sp/>possible<sp/>for<sp/>value.string_?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>value.getString(&amp;str,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/>pushValue(<ref refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" kindref="member">valueToQuotedStringN</ref>(str,<sp/>static_cast&lt;unsigned&gt;(end-str)));</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asBool()));</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/>writeArrayValue(value);</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:<sp/>{</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/>Value::Members<sp/>members(value.getMemberNames());</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(members.empty())</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent();</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value::Members::iterator<sp/>it<sp/>=<sp/>members.begin();</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>childValue<sp/>=<sp/>value[name];</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentBeforeValue(childValue);</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(<ref refid="namespace_json_1aa0c8235a4a5c6599da5d3332743db8ac" kindref="member">valueToQuotedString</ref>(name.c_str()));</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(childValue);</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++it<sp/>==<sp/>members.end())<sp/>{</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unindent();</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::writeArrayValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isArrayMultiLine<sp/>=<sp/>isMultineArray(value);</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isArrayMultiLine)<sp/>{</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent();</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasChildValue<sp/>=<sp/>!childValues_.empty();</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>childValue<sp/>=<sp/>value[index];</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentBeforeValue(childValue);</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasChildValue)</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(childValues_[index]);</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeIndent();</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(childValue);</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++index<sp/>==<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unindent();</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>output<sp/>on<sp/>a<sp/>single<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(childValues_.size()<sp/>==<sp/>size);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document_<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document_<sp/>+=<sp/>childValues_[index];</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>document_<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StyledWriter::isMultineArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>ArrayIndex<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultiLine<sp/>=<sp/>size<sp/>*<sp/>3<sp/>&gt;=<sp/>rightMargin_;</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/>childValues_.clear();</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size<sp/>&amp;&amp;<sp/>!isMultiLine;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>childValue<sp/>=<sp/>value[index];</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/>((childValue.isArray()<sp/>||<sp/>childValue.isObject())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childValue.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isMultiLine)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>line<sp/>length<sp/>&gt;<sp/>max<sp/>line<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/>childValues_.reserve(size);</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/>addChildValues_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayIndex<sp/>lineLength<sp/>=<sp/>4<sp/>+<sp/>(size<sp/>-<sp/>1)<sp/>*<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>&apos;[<sp/>&apos;<sp/>+<sp/>&apos;,<sp/>&apos;*n<sp/>+<sp/>&apos;<sp/>]&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasCommentForValue(value[index]))<sp/>{</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(value[index]);</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineLength<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ArrayIndex</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(childValues_[index].length());</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/>addChildValues_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/>isMultiLine<sp/>||<sp/>lineLength<sp/>&gt;=<sp/>rightMargin_;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isMultiLine;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::pushValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addChildValues_)</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/>childValues_.push_back(value);</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::writeIndent()<sp/>{</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>last<sp/>=<sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref>[<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref>.length()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>already<sp/>indented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>Comments<sp/>may<sp/>add<sp/>new-line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/>indentString_;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::writeWithIndent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/>writeIndent();</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="4536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::indent()<sp/>{<sp/>indentString_<sp/>+=<sp/>std::string(indentSize_,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::unindent()<sp/>{</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/>assert(indentString_.size()<sp/>&gt;=<sp/>indentSize_);</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/>indentString_.resize(indentString_.size()<sp/>-<sp/>indentSize_);</highlight></codeline>
<codeline lineno="4543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::writeCommentBeforeValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root.hasComment(commentBefore))</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/>writeIndent();</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>comment<sp/>=<sp/>root.getComment(commentBefore);</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/>std::string::const_iterator<sp/>iter<sp/>=<sp/>comment.begin();</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>comment.end())<sp/>{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/>*iter;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*iter<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter<sp/>!=<sp/>comment.end()<sp/>&amp;&amp;<sp/>*(iter<sp/>+<sp/>1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeIndent();</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Comments<sp/>are<sp/>stripped<sp/>of<sp/>trailing<sp/>newlines,<sp/>so<sp/>add<sp/>one<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledWriter::writeCommentAfterValueOnSameLine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root.hasComment(commentAfterOnSameLine))</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>root.getComment(commentAfterOnSameLine);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root.hasComment(commentAfter))<sp/>{</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/>root.getComment(commentAfter);</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StyledWriter::hasCommentForValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value.hasComment(commentBefore)<sp/>||</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.hasComment(commentAfterOnSameLine)<sp/>||</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.hasComment(commentAfter);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>StyledStreamWriter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal">StyledStreamWriter::StyledStreamWriter(std::string<sp/>indentation)</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref>(NULL),<sp/>rightMargin_(74),<sp/>indentation_(indentation),</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addChildValues_()<sp/>{}</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::write(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>=<sp/>&amp;out;</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/>addChildValues_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/>indentString_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/>indented_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/>writeCommentBeforeValue(root);</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!indented_)<sp/>writeIndent();</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/>indented_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/>writeValue(root);</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/>writeCommentAfterValueOnSameLine(root);</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Forget<sp/>the<sp/>stream,<sp/>for<sp/>safety.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::writeValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value.type())<sp/>{</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestInt()));</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestUInt()));</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asDouble()));</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>NULL<sp/>possible<sp/>for<sp/>value.string_?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end;</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>value.getString(&amp;str,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/>pushValue(<ref refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" kindref="member">valueToQuotedStringN</ref>(str,<sp/>static_cast&lt;unsigned&gt;(end-str)));</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asBool()));</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/>writeArrayValue(value);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:<sp/>{</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/>Value::Members<sp/>members(value.getMemberNames());</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(members.empty())</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent();</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value::Members::iterator<sp/>it<sp/>=<sp/>members.begin();</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>childValue<sp/>=<sp/>value[name];</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentBeforeValue(childValue);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(<ref refid="namespace_json_1aa0c8235a4a5c6599da5d3332743db8ac" kindref="member">valueToQuotedString</ref>(name.c_str()));</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(childValue);</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++it<sp/>==<sp/>members.end())<sp/>{</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unindent();</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::writeArrayValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/>pushValue(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isArrayMultiLine<sp/>=<sp/>isMultineArray(value);</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isArrayMultiLine)<sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent();</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasChildValue<sp/>=<sp/>!childValues_.empty();</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>childValue<sp/>=<sp/>value[index];</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentBeforeValue(childValue);</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasChildValue)</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(childValues_[index]);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!indented_)<sp/>writeIndent();</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indented_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(childValue);</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indented_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++index<sp/>==<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeCommentAfterValueOnSameLine(childValue);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unindent();</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeWithIndent(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>output<sp/>on<sp/>a<sp/>single<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(childValues_.size()<sp/>==<sp/>size);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*document_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*document_<sp/>&lt;&lt;<sp/>childValues_[index];</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*document_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StyledStreamWriter::isMultineArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/>ArrayIndex<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultiLine<sp/>=<sp/>size<sp/>*<sp/>3<sp/>&gt;=<sp/>rightMargin_;</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/>childValues_.clear();</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size<sp/>&amp;&amp;<sp/>!isMultiLine;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>childValue<sp/>=<sp/>value[index];</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/>((childValue.isArray()<sp/>||<sp/>childValue.isObject())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childValue.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isMultiLine)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>line<sp/>length<sp/>&gt;<sp/>max<sp/>line<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/>childValues_.reserve(size);</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/>addChildValues_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayIndex<sp/>lineLength<sp/>=<sp/>4<sp/>+<sp/>(size<sp/>-<sp/>1)<sp/>*<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>&apos;[<sp/>&apos;<sp/>+<sp/>&apos;,<sp/>&apos;*n<sp/>+<sp/>&apos;<sp/>]&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasCommentForValue(value[index]))<sp/>{</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeValue(value[index]);</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineLength<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ArrayIndex</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(childValues_[index].length());</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/>addChildValues_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/>isMultiLine<sp/>||<sp/>lineLength<sp/>&gt;=<sp/>rightMargin_;</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isMultiLine;</highlight></codeline>
<codeline lineno="4732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::pushValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addChildValues_)</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/>childValues_.push_back(value);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="4739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::writeIndent()<sp/>{</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>blep<sp/>intended<sp/>this<sp/>to<sp/>look<sp/>at<sp/>the<sp/>so-far-written<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>determine<sp/>whether<sp/>we<sp/>are<sp/>already<sp/>indented,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>stream<sp/>we<sp/>cannot<sp/>do<sp/>that.<sp/>So<sp/>we<sp/>rely<sp/>on<sp/>some<sp/>saved<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>caller<sp/>checks<sp/>indented_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>indentString_;</highlight></codeline>
<codeline lineno="4747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::writeWithIndent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!indented_)<sp/>writeIndent();</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/>indented_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::indent()<sp/>{<sp/>indentString_<sp/>+=<sp/>indentation_;<sp/>}</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::unindent()<sp/>{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/>assert(indentString_.size()<sp/>&gt;=<sp/>indentation_.size());</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/>indentString_.resize(indentString_.size()<sp/>-<sp/>indentation_.size());</highlight></codeline>
<codeline lineno="4760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::writeCommentBeforeValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root.hasComment(commentBefore))</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!indented_)<sp/>writeIndent();</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>comment<sp/>=<sp/>root.getComment(commentBefore);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/>std::string::const_iterator<sp/>iter<sp/>=<sp/>comment.begin();</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>comment.end())<sp/>{</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/>*iter;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*iter<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter<sp/>!=<sp/>comment.end()<sp/>&amp;&amp;<sp/>*(iter<sp/>+<sp/>1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writeIndent();<sp/><sp/>//<sp/>would<sp/>include<sp/>newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/>indentString_;</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/>indented_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StyledStreamWriter::writeCommentAfterValueOnSameLine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root.hasComment(commentAfterOnSameLine))</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>root.getComment(commentAfterOnSameLine);</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root.hasComment(commentAfter))<sp/>{</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>writeIndent();</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="class_json_1_1_our_reader_1aeb9b8bb85fa8a4dd72e546bb3104c597" kindref="member">document_</ref><sp/>&lt;&lt;<sp/>root.getComment(commentAfter);</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/>indented_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StyledStreamWriter::hasCommentForValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value.hasComment(commentBefore)<sp/>||</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.hasComment(commentAfterOnSameLine)<sp/>||</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.hasComment(commentAfter);</highlight></codeline>
<codeline lineno="4795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="comment">//<sp/>BuiltStyledStreamWriter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight></codeline>
<codeline lineno="4801" refid="struct_json_1_1_comment_style" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_json_1_1_comment_style" kindref="compound">CommentStyle</ref><sp/>{</highlight></codeline>
<codeline lineno="4803" refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0c" kindref="member">Enum</ref><sp/>{</highlight></codeline>
<codeline lineno="4804" refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0cac8b32a8bae63414c8647d4919da8d437" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0cac8b32a8bae63414c8647d4919da8d437" kindref="member">None</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="4805" refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0cac65238f050773c107690a456e9c05c98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0cac65238f050773c107690a456e9c05c98" kindref="member">Most</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="4806" refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0ca32302c0b97190c1808b3e38f367fef01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>All<sp/><sp/></highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="4808"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight></codeline>
<codeline lineno="4810" refid="struct_json_1_1_built_styled_stream_writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_json_1_1_built_styled_stream_writer" kindref="compound">BuiltStyledStreamWriter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StreamWriter</highlight></codeline>
<codeline lineno="4811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer" kindref="compound">BuiltStyledStreamWriter</ref>(</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>indentation,</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0c" kindref="member">CommentStyle::Enum</ref><sp/>cs,</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>colonSymbol,</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nullSymbol,</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>endingLineFeedSymbol,</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useSpecialFloats,</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision);</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root,<sp/>std::ostream*<sp/>sout)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeValue(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeArrayValue(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultineArray(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushValue(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value);</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeIndent();</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeWithIndent(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value);</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>indent();</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unindent();</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeCommentBeforeValue(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeCommentAfterValueOnSameLine(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCommentForValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value);</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight></codeline>
<codeline lineno="4834" refid="struct_json_1_1_built_styled_stream_writer_1a8356597862a354bcd55a7cb6e0512899" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a8356597862a354bcd55a7cb6e0512899" kindref="member">ChildValues</ref>;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"></highlight></codeline>
<codeline lineno="4836" refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" refkind="member"><highlight class="normal"><sp/><sp/>ChildValues<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>;</highlight></codeline>
<codeline lineno="4837" refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref>;</highlight></codeline>
<codeline lineno="4838" refid="struct_json_1_1_built_styled_stream_writer_1a06a51521ccae20397f52fe3036edc602" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a06a51521ccae20397f52fe3036edc602" kindref="member">rightMargin_</ref>;</highlight></codeline>
<codeline lineno="4839" refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" kindref="member">indentation_</ref>;</highlight></codeline>
<codeline lineno="4840" refid="struct_json_1_1_built_styled_stream_writer_1a89a9c76c7531143b52785861ba21c1d4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0c" kindref="member">CommentStyle::Enum</ref><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a89a9c76c7531143b52785861ba21c1d4" kindref="member">cs_</ref>;</highlight></codeline>
<codeline lineno="4841" refid="struct_json_1_1_built_styled_stream_writer_1ac28b111b1c3ecc1ea6d981c8530ceca4" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1ac28b111b1c3ecc1ea6d981c8530ceca4" kindref="member">colonSymbol_</ref>;</highlight></codeline>
<codeline lineno="4842" refid="struct_json_1_1_built_styled_stream_writer_1a238a8f4737c9835af78ea80cc4f12658" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a238a8f4737c9835af78ea80cc4f12658" kindref="member">nullSymbol_</ref>;</highlight></codeline>
<codeline lineno="4843" refid="struct_json_1_1_built_styled_stream_writer_1a85a8c0e3c9deb2503d497f61bc0da74c" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a85a8c0e3c9deb2503d497f61bc0da74c" kindref="member">endingLineFeedSymbol_</ref>;</highlight></codeline>
<codeline lineno="4844" refid="struct_json_1_1_built_styled_stream_writer_1abed9cc31da503b48798e7cea68c42e16" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addChildValues_<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="4845" refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>indented_<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="4846" refid="struct_json_1_1_built_styled_stream_writer_1a6f1b8694b4eb17ab8c34f6d6dd8c8a4a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useSpecialFloats_<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="4847" refid="struct_json_1_1_built_styled_stream_writer_1a6373d8d0ae4741b64e3904e4db0eef46" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6373d8d0ae4741b64e3904e4db0eef46" kindref="member">precision_</ref>;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4849" refid="struct_json_1_1_built_styled_stream_writer_1ab0c2e665c86b22f8fafb0e52c8069954" refkind="member"><highlight class="normal"><ref refid="struct_json_1_1_built_styled_stream_writer_1ab0c2e665c86b22f8fafb0e52c8069954" kindref="member">BuiltStyledStreamWriter::BuiltStyledStreamWriter</ref>(</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>indentation,</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0c" kindref="member">CommentStyle::Enum</ref><sp/>cs,</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>colonSymbol,</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nullSymbol,</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>endingLineFeedSymbol,</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useSpecialFloats,</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision)</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/>:<sp/>rightMargin_(74)</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/>,<sp/>indentation_(indentation)</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/>,<sp/>cs_(cs)</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/>,<sp/>colonSymbol_(colonSymbol)</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/>,<sp/>nullSymbol_(nullSymbol)</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/>,<sp/>endingLineFeedSymbol_(endingLineFeedSymbol)</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/>,<sp/>addChildValues_(false)</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/>,<sp/>indented_(false)</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/>,<sp/>useSpecialFloats_(useSpecialFloats)</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/>,<sp/>precision_(precision)</highlight></codeline>
<codeline lineno="4867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4869" refid="struct_json_1_1_built_styled_stream_writer_1a2ecffc3d66c4feddf208e5cd3b1c0f18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2ecffc3d66c4feddf208e5cd3b1c0f18" kindref="member">BuiltStyledStreamWriter::write</ref>(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root,<sp/>std::ostream*<sp/>sout)</highlight></codeline>
<codeline lineno="4870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/>sout_<sp/>=<sp/>sout;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1abed9cc31da503b48798e7cea68c42e16" kindref="member">addChildValues_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" kindref="member">writeCommentBeforeValue</ref>(root);</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref>)<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2b38a3714d415c4bd3b4812897130f3d" kindref="member">writeIndent</ref>();</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" kindref="member">writeValue</ref>(root);</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" kindref="member">writeCommentAfterValueOnSameLine</ref>(root);</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a85a8c0e3c9deb2503d497f61bc0da74c" kindref="member">endingLineFeedSymbol_</ref>;</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/>sout_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4884" refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" kindref="member">BuiltStyledStreamWriter::writeValue</ref>(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value.type())<sp/>{</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>nullValue:</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(<ref refid="struct_json_1_1_built_styled_stream_writer_1a238a8f4737c9835af78ea80cc4f12658" kindref="member">nullSymbol_</ref>);</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>intValue:</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestInt()));</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uintValue:</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asLargestUInt()));</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>realValue:</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asDouble(),<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6f1b8694b4eb17ab8c34f6d6dd8c8a4a" kindref="member">useSpecialFloats_</ref>,<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6373d8d0ae4741b64e3904e4db0eef46" kindref="member">precision_</ref>));</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>stringValue:</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>NULL<sp/>is<sp/>possible<sp/>for<sp/>value.string_?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end;</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>value.getString(&amp;str,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(<ref refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" kindref="member">valueToQuotedStringN</ref>(str,<sp/>static_cast&lt;unsigned&gt;(end-str)));</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>booleanValue:</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(<ref refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" kindref="member">valueToString</ref>(value.asBool()));</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arrayValue:</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1acd20e9274bbcf7876ef3af2e7d23a31f" kindref="member">writeArrayValue</ref>(value);</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objectValue:<sp/>{</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>Value::Members<sp/>members(value.getMemberNames());</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(members.empty())</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" kindref="member">writeWithIndent</ref>(</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a73e09692a2cfbd6e67836b060dc34a9f" kindref="member">indent</ref>();</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value::Members::iterator<sp/>it<sp/>=<sp/>members.begin();</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>childValue<sp/>=<sp/>value[name];</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" kindref="member">writeCommentBeforeValue</ref>(childValue);</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" kindref="member">writeWithIndent</ref>(<ref refid="namespace_json_1a20d52b5a457ee5d833645d119451c2cd" kindref="member">valueToQuotedStringN</ref>(name.data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(name.length())));</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1ac28b111b1c3ecc1ea6d981c8530ceca4" kindref="member">colonSymbol_</ref>;</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" kindref="member">writeValue</ref>(childValue);</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++it<sp/>==<sp/>members.end())<sp/>{</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" kindref="member">writeCommentAfterValueOnSameLine</ref>(childValue);</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" kindref="member">writeCommentAfterValueOnSameLine</ref>(childValue);</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a0da6c6f603e00c8c6e38af553edd8c55" kindref="member">unindent</ref>();</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" kindref="member">writeWithIndent</ref>(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943" refid="struct_json_1_1_built_styled_stream_writer_1acd20e9274bbcf7876ef3af2e7d23a31f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1acd20e9274bbcf7876ef3af2e7d23a31f" kindref="member">BuiltStyledStreamWriter::writeArrayValue</ref>(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">pushValue</ref>(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultiLine<sp/>=<sp/>(<ref refid="struct_json_1_1_built_styled_stream_writer_1a89a9c76c7531143b52785861ba21c1d4" kindref="member">cs_</ref><sp/>==<sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0ca32302c0b97190c1808b3e38f367fef01" kindref="member">CommentStyle::All</ref>)<sp/>||<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1af423fd33b3d580506ea3efc53b05a077" kindref="member">isMultineArray</ref>(value);</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMultiLine)<sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" kindref="member">writeWithIndent</ref>(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a73e09692a2cfbd6e67836b060dc34a9f" kindref="member">indent</ref>();</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasChildValue<sp/>=<sp/>!<ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>.empty();</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>childValue<sp/>=<sp/>value[index];</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" kindref="member">writeCommentBeforeValue</ref>(childValue);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasChildValue)</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" kindref="member">writeWithIndent</ref>(<ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>[index]);</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref>)<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2b38a3714d415c4bd3b4812897130f3d" kindref="member">writeIndent</ref>();</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" kindref="member">writeValue</ref>(childValue);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++index<sp/>==<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" kindref="member">writeCommentAfterValueOnSameLine</ref>(childValue);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" kindref="member">writeCommentAfterValueOnSameLine</ref>(childValue);</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a0da6c6f603e00c8c6e38af553edd8c55" kindref="member">unindent</ref>();</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" kindref="member">writeWithIndent</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>output<sp/>on<sp/>a<sp/>single<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>.size()<sp/>==<sp/>size);</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" kindref="member">indentation_</ref>.empty())<sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>[index];</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" kindref="member">indentation_</ref>.empty())<sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"></highlight></codeline>
<codeline lineno="4990" refid="struct_json_1_1_built_styled_stream_writer_1af423fd33b3d580506ea3efc53b05a077" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1af423fd33b3d580506ea3efc53b05a077" kindref="member">BuiltStyledStreamWriter::isMultineArray</ref>(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/>ArrayIndex<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>value.size();</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultiLine<sp/>=<sp/>size<sp/>*<sp/>3<sp/>&gt;=<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a06a51521ccae20397f52fe3036edc602" kindref="member">rightMargin_</ref>;</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>.clear();</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size<sp/>&amp;&amp;<sp/>!isMultiLine;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>childValue<sp/>=<sp/>value[index];</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/>((childValue.isArray()<sp/>||<sp/>childValue.isObject())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childValue.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isMultiLine)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>line<sp/>length<sp/>&gt;<sp/>max<sp/>line<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>.reserve(size);</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1abed9cc31da503b48798e7cea68c42e16" kindref="member">addChildValues_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayIndex<sp/>lineLength<sp/>=<sp/>4<sp/>+<sp/>(size<sp/>-<sp/>1)<sp/>*<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>&apos;[<sp/>&apos;<sp/>+<sp/>&apos;,<sp/>&apos;*n<sp/>+<sp/>&apos;<sp/>]&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ArrayIndex<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>size;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_json_1_1_built_styled_stream_writer_1a457c2f3c1e8c952caeb60e52477d0c9a" kindref="member">hasCommentForValue</ref>(value[index]))<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" kindref="member">writeValue</ref>(value[index]);</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineLength<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ArrayIndex</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>[index].length());</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1abed9cc31da503b48798e7cea68c42e16" kindref="member">addChildValues_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/>isMultiLine<sp/>=<sp/>isMultiLine<sp/>||<sp/>lineLength<sp/>&gt;=<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a06a51521ccae20397f52fe3036edc602" kindref="member">rightMargin_</ref>;</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isMultiLine;</highlight></codeline>
<codeline lineno="5015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"></highlight></codeline>
<codeline lineno="5017" refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a53de0fe57c883d621c7255e49248651e" kindref="member">BuiltStyledStreamWriter::pushValue</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_json_1_1_built_styled_stream_writer_1abed9cc31da503b48798e7cea68c42e16" kindref="member">addChildValues_</ref>)</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a47d562d7874c5b1e68995bd62f575792" kindref="member">childValues_</ref>.push_back(value);</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight></codeline>
<codeline lineno="5024" refid="struct_json_1_1_built_styled_stream_writer_1a2b38a3714d415c4bd3b4812897130f3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2b38a3714d415c4bd3b4812897130f3d" kindref="member">BuiltStyledStreamWriter::writeIndent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>blep<sp/>intended<sp/>this<sp/>to<sp/>look<sp/>at<sp/>the<sp/>so-far-written<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>determine<sp/>whether<sp/>we<sp/>are<sp/>already<sp/>indented,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>stream<sp/>we<sp/>cannot<sp/>do<sp/>that.<sp/>So<sp/>we<sp/>rely<sp/>on<sp/>some<sp/>saved<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>caller<sp/>checks<sp/>indented_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"></highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" kindref="member">indentation_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,<sp/>drop<sp/>newlines<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref>;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight></codeline>
<codeline lineno="5036" refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a764c6d530b5bd660c4a7d1ad4eff6b8d" kindref="member">BuiltStyledStreamWriter::writeWithIndent</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref>)<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2b38a3714d415c4bd3b4812897130f3d" kindref="member">writeIndent</ref>();</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"></highlight></codeline>
<codeline lineno="5042" refid="struct_json_1_1_built_styled_stream_writer_1a73e09692a2cfbd6e67836b060dc34a9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a73e09692a2cfbd6e67836b060dc34a9f" kindref="member">BuiltStyledStreamWriter::indent</ref>()<sp/>{<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref><sp/>+=<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" kindref="member">indentation_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight></codeline>
<codeline lineno="5044" refid="struct_json_1_1_built_styled_stream_writer_1a0da6c6f603e00c8c6e38af553edd8c55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a0da6c6f603e00c8c6e38af553edd8c55" kindref="member">BuiltStyledStreamWriter::unindent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/>assert(<ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref>.size()<sp/>&gt;=<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" kindref="member">indentation_</ref>.size());</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref>.resize(<ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref>.size()<sp/>-<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1ab1d7561ca0f480cb46cc113e1005e8ac" kindref="member">indentation_</ref>.size());</highlight></codeline>
<codeline lineno="5047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049" refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" kindref="member">BuiltStyledStreamWriter::writeCommentBeforeValue</ref>(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_json_1_1_built_styled_stream_writer_1a89a9c76c7531143b52785861ba21c1d4" kindref="member">cs_</ref><sp/>==<sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0cac8b32a8bae63414c8647d4919da8d437" kindref="member">CommentStyle::None</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root.hasComment(commentBefore))</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref>)<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2b38a3714d415c4bd3b4812897130f3d" kindref="member">writeIndent</ref>();</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>comment<sp/>=<sp/>root.getComment(commentBefore);</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/>std::string::const_iterator<sp/>iter<sp/>=<sp/>comment.begin();</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>comment.end())<sp/>{</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/>*iter;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*iter<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iter<sp/>!=<sp/>comment.end()<sp/>&amp;&amp;<sp/>*(iter<sp/>+<sp/>1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writeIndent();<sp/><sp/>//<sp/>would<sp/>write<sp/>extra<sp/>newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2abfd5beb7f33adc3f690ce4f618aa2f" kindref="member">indentString_</ref>;</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a6aa0ad023e623f600103631a6bca6d10" kindref="member">indented_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight></codeline>
<codeline lineno="5068" refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" kindref="member">BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine</ref>(Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_json_1_1_built_styled_stream_writer_1a89a9c76c7531143b52785861ba21c1d4" kindref="member">cs_</ref><sp/>==<sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0cac8b32a8bae63414c8647d4919da8d437" kindref="member">CommentStyle::None</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root.hasComment(commentAfterOnSameLine))</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>root.getComment(commentAfterOnSameLine);</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root.hasComment(commentAfter))<sp/>{</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a2b38a3714d415c4bd3b4812897130f3d" kindref="member">writeIndent</ref>();</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>*sout_<sp/>&lt;&lt;<sp/>root.getComment(commentAfter);</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5080" refid="struct_json_1_1_built_styled_stream_writer_1a457c2f3c1e8c952caeb60e52477d0c9a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1a457c2f3c1e8c952caeb60e52477d0c9a" kindref="member">BuiltStyledStreamWriter::hasCommentForValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value.hasComment(commentBefore)<sp/>||</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.hasComment(commentAfterOnSameLine)<sp/>||</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.hasComment(commentAfter);</highlight></codeline>
<codeline lineno="5084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="comment">//<sp/>StreamWriter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal">StreamWriter::StreamWriter()</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>sout_(NULL)</highlight></codeline>
<codeline lineno="5091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5093"><highlight class="normal">StreamWriter::~StreamWriter()</highlight></codeline>
<codeline lineno="5094"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5096"><highlight class="normal">StreamWriter::Factory::~Factory()</highlight></codeline>
<codeline lineno="5097"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal">StreamWriterBuilder::StreamWriterBuilder()</highlight></codeline>
<codeline lineno="5099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/>setDefaults(&amp;settings_);</highlight></codeline>
<codeline lineno="5101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5102"><highlight class="normal">StreamWriterBuilder::~StreamWriterBuilder()</highlight></codeline>
<codeline lineno="5103"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5104"><highlight class="normal">StreamWriter*<sp/>StreamWriterBuilder::newStreamWriter()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5105"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/>std::string<sp/>indentation<sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;indentation&quot;</highlight><highlight class="normal">].asString();</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/>std::string<sp/>cs_str<sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;commentStyle&quot;</highlight><highlight class="normal">].asString();</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>eyc<sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;enableYAMLCompatibility&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dnp<sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;dropNullPlaceholders&quot;</highlight><highlight class="normal">].asBool();</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>usf<sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;useSpecialFloats&quot;</highlight><highlight class="normal">].asBool();<sp/></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pre<sp/>=<sp/>settings_[</highlight><highlight class="stringliteral">&quot;precision&quot;</highlight><highlight class="normal">].asUInt();</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0c" kindref="member">CommentStyle::Enum</ref><sp/>cs<sp/>=<sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0ca32302c0b97190c1808b3e38f367fef01" kindref="member">CommentStyle::All</ref>;</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cs_str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/>cs<sp/>=<sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0ca32302c0b97190c1808b3e38f367fef01" kindref="member">CommentStyle::All</ref>;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cs_str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>cs<sp/>=<sp/><ref refid="struct_json_1_1_comment_style_1a51fc08f3518fd81eba12f340d19a3d0cac8b32a8bae63414c8647d4919da8d437" kindref="member">CommentStyle::None</ref>;</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;commentStyle<sp/>must<sp/>be<sp/>&apos;All&apos;<sp/>or<sp/>&apos;None&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/>std::string<sp/>colonSymbol<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eyc)<sp/>{</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>colonSymbol<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indentation.empty())<sp/>{</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/>colonSymbol<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/>std::string<sp/>nullSymbol<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dnp)<sp/>{</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/>nullSymbol<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pre<sp/>&gt;<sp/>17)<sp/>pre<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/>std::string<sp/>endingLineFeedSymbol<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_json_1_1_built_styled_stream_writer_1ab0c2e665c86b22f8fafb0e52c8069954" kindref="member">BuiltStyledStreamWriter</ref>(</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indentation,<sp/>cs,</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colonSymbol,<sp/>nullSymbol,<sp/>endingLineFeedSymbol,<sp/>usf,<sp/>pre);</highlight></codeline>
<codeline lineno="5135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5136" refid="namespace_json_1a45c3c8847f03b09cd61035e615d1d820" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_json_1a45c3c8847f03b09cd61035e615d1d820" kindref="member">getValidWriterKeys</ref>(std::set&lt;std::string&gt;*<sp/>valid_keys)</highlight></codeline>
<codeline lineno="5137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/>valid_keys-&gt;clear();</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;indentation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;commentStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;enableYAMLCompatibility&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;dropNullPlaceholders&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;useSpecialFloats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/>valid_keys-&gt;insert(</highlight><highlight class="stringliteral">&quot;precision&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StreamWriterBuilder::validate(Json::Value*<sp/>invalid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5147"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/>Json::Value<sp/>my_invalid;</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!invalid)<sp/>invalid<sp/>=<sp/>&amp;my_invalid;<sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>test<sp/>for<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/>Json::Value&amp;<sp/>inv<sp/>=<sp/>*invalid;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/>std::set&lt;std::string&gt;<sp/>valid_keys;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1a45c3c8847f03b09cd61035e615d1d820" kindref="member">getValidWriterKeys</ref>(&amp;valid_keys);</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/>Value::Members<sp/>keys<sp/>=<sp/>settings_.getMemberNames();</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>keys.size();</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key<sp/>=<sp/>keys[i];</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_keys.find(key)<sp/>==<sp/>valid_keys.end())<sp/>{</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inv[key]<sp/>=<sp/>settings_[key];</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0u<sp/>==<sp/>inv.size();</highlight></codeline>
<codeline lineno="5162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5163"><highlight class="normal">Value&amp;<sp/>StreamWriterBuilder::operator[](std::string<sp/>key)</highlight></codeline>
<codeline lineno="5164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings_[key];</highlight></codeline>
<codeline lineno="5166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamWriterBuilder::setDefaults(Json::Value*<sp/>settings)</highlight></codeline>
<codeline lineno="5169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;commentStyle&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;indentation&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;enableYAMLCompatibility&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;dropNullPlaceholders&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;useSpecialFloats&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/>(*settings)[</highlight><highlight class="stringliteral">&quot;precision&quot;</highlight><highlight class="normal">]<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="5178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"></highlight></codeline>
<codeline lineno="5180" refid="namespace_json_1a220ff8b67bdeac754a87ecd979ddc020" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespace_json_1a220ff8b67bdeac754a87ecd979ddc020" kindref="member">writeString</ref>(StreamWriter::Factory<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>builder,<sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>sout;</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/>StreamWriterPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>writer(builder.newStreamWriter());</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/>writer-&gt;write(root,<sp/>&amp;sout);</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sout.str();</highlight></codeline>
<codeline lineno="5185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"></highlight></codeline>
<codeline lineno="5187" refid="namespace_json_1af64fba09a9679b8b8cb50dd3e85f6fd5" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespace_json_1af64fba09a9679b8b8cb50dd3e85f6fd5" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>sout,<sp/>Value<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/>StreamWriterBuilder<sp/>builder;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/>StreamWriterPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>writer(builder.newStreamWriter());</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/>writer-&gt;write(root,<sp/>&amp;sout);</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sout;</highlight></codeline>
<codeline lineno="5192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>content<sp/>of<sp/>file:<sp/>src/lib_json/json_writer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"></highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight></codeline>
<codeline lineno="5202"><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mel/projects/Misc/Minecraft Server Service/src/jsoncpp.cpp"/>
  </compounddef>
</doxygen>
